In all biological networks  some simple ‘network motifs’ appear more often than they would by pure chance [–]. This regularity has been interpreted as evidence that these motifs are basic building blocks of biological machineries, a proposal that has had a major impact on systems biology [, ]. However, mere statistical abundance by itself does not imply that these circuits are core bricks of biological systems. In fact, whether these network motifs may have a functional role in biological computation remains controversial [–]. Functional building blocks should offer computational repertoires drawing parallels between biological networks and electronic circuits . Indeed, the idea of using electronic circuitry and devices to mimic aspects of gene regulatory networks has been in circulation almost since the inception of regulatory genetics itself . This idea has been a driving force in synthetic biology ; with several demonstrations showing that engineered biological circuits can perform computations , such as toggle switches [–], logic , memory storage [, , ], pulse generators and oscillators [, –]. In a previous work , we have shown that the building blocks of gene regulatory networks can be identified by the fibration symmetries of these networks. In the present paper, we first demonstrate the functionality of these symmetric building blocks in terms of synchronized biological clocks. We then show that the breaking of the fibration symmetries of the network identifies additional building blocks with core logic computational functions. We do so through a constructive procedure based on symmetry breaking that naturally reveals a hierarchy of genetic building blocks widely present across biological networks and species. This hierarchy maps to a progression of fundamental units of electronics, starting with the transistor, and progressing to ring oscillators and current-mirror circuits and then to memory devices such as toggle switches and flip-flops. We show that, while symmetric circuits work as synchronized oscillators, the breaking of these symmetries plays a fundamental role by switching the functionality of circuits from synchronized clocks to memory units. Thus, our constructive theoretical framework identifies 1) building blocks of genetic networks in a unified way from fundamental symmetry and broken symmetry principles, which 2) assure that they perform core logic computations, 3) suggests a natural mapping onto the foundational circuits of solid state electronics [, ], and 4) endows the mathematical notion of symmetry fibration  with biological significance. Feed-forward loops do not synchronize We start our analysis by considering the dynamics of the most abundant network motif in transcriptional regulatory networks, the so-called feed-forward loop (FFL) introduced by Alon and coworkers [, , ]. A cFFL motif consists of three genes (X, Y and Z; c refers to coherent where all regulators are activators) where the transcription factor expressed by gene X positively regulates the transcription of Y and Z, and, in turn Y regulates Z ().  shows an example of cFFL motif in  with X = , Y = , and Z = . Numerical and analytic solutions for the expression levels of the genes in the cFFL () demonstrate that the FFL does not reach synchronization (unless for very specific setting of parameters) nor oscillations in expression levels. This is consistent with previous research which has interpreted the functionality of the FFL as signal delay [, , ]. We illustrate this result by presenting an analytical solution of the FFL [–]. We use a discrete time, continuous state variable model with a logic Boolean interaction function in the spirit of the Glass and Kauffman model of biochemical networks . The dynamics of the expression levels  and  of genes Y and Z, respectively, as a function of time  in the cFFL is given by the following difference equations :

where  is the expression level of gene X,  is the degradation rate of the gene,  and  are the strength of the interaction representing the maximum expression rate of genes X and Y, respectively, and the thresholds  and  are the dissociation constant between the transcription factor and biding site. The expression level is measured in terms of abundance of gene product, e.g., mRNA concentration. The Heaviside step functions ( − ) and ( − ) represent the activator regulation from gene X and Y, respectively. They represent the Boolean logic approximation of Hill input functions in the limit of strong cooperativity [, ]. We consider an AND gate for the combined interaction of transcription factors of genes X and Y onto the binding sites of gene Z . Analogous results shown in  Section I can be obtained with an OR gate and with ODE continuum models. In  Sec. I A, we show that the expression levels of the genes Y and Z do not synchronize, in other words, ( − ) ≠ 0. For example,  shows a particular set of parameters which results in a non-synchronized state. Such state is obtained under initial condition  >  and  < . Specifically, we use the parameters:  = 0.2,  = 0.12,  = 0.7,  = 0.5 and  = 0.1. For this combination,  and  do not synchronize since  saturates at  → / = 0.6 when  → ∞, and  saturates at  → / = 0.42, for  → ∞. In this figure, we set  equal to a square wave and then monitor the expression levels of  and . When  < , both  and  decay exponentially to zero. On the other hand, when  > , both variables evolve to saturate again at  = / and  = /, in agreement with the analytical solution. 10.1371/journal.pcbi.1007776.g001 Feed-Forward Loop (FFL) and Feed-Forward Fiber (FFF). A: FFL network representation. B: Numerical solution of FFL dynamics. The expression levels of genes Y and Z do not synchronize. The oscillation pattern presented is due to the square-wave behavior of gene X expression levels. We use  = 2.0,  = 0.12,  = 0.7,  = 0.5,  = 0.1,  = 0.7 and  = 0.0. C: Input tree representation of FFL. The input trees of genes X, Y, and Z are not isomorphic, as a consequence, their expression levels do not synchronize. D: Base representation of FFL. The  is the same as the original circuits since there are no symmetries. E: SAT-FFF network representation. As an example, we consider genes  = X,  = Y, and  = Z from the gene regulatory network of . The addition of the autoregulation leads to a symmetry between the expression levels of genes Y and Z. F: The numerical solution of the SAT-FFF dynamics shows the synchronization of the expression levels of genes Y and Z. We use  = 0.06,  = 0.775,  = 0.775,  = 0.5,  = 0.1,  = 0.85 and  = 0.0. Again, the oscillation is due to the wave-like pattern of X. G: As a result, genes Y and Z have isomorphic input trees. However, the input tree of the external regulator  is not isomorphic, despite the fact that it directly regulates the . H: Since Y and Z synchronize, gene Z can be collapsed into Y, resulting in a simpler  representation. Feed-forward fibers synchronize via a symmetry fibration In the FFL, gene Z receives input from X and Y, while gene Y, instead, only from X, and therefore the inputs are not symmetric (). But as it turns out, a search of motifs in biological networks  shows that the FFL circuit in  regularly appears in conjunction with an autoregulation (AR) loop  at Y =  (). This minimal inclusion in the FFL symmetrizes the circuit and we show, next, that this symmetry results in a circuit with a first and minimal form of function: synchronization in gene expression. This can be formalized by analyzing invariances in the input tree , which represents all the paths that converge to a given gene (). The mathematical principle of symmetry fibration in dynamical systems introduced in [, , ] predicts this, since symmetries Y ↔ Z that leave invariant the tree of inputs (but not necessarily the outputs as imposed by automorphisms) are necessary and sufficient to achieve synchronization. When two genes have isomorphic input trees, their expression levels are synchronized, see  for details. For instance, by means of its autoregulation,  forms a symmetry fibration with gene , that can be formalized and characterized by an isomorphism between the input trees of these genes (). When two input trees, like those of  and , are isomorphic, the expression levels of these two genes are synchronized. These genes are said to belong to the same  [, ]. Genes in the same  are redundant, and can be collapsed into the ‘’ (see ) by a symmetry fibration  (the FFL, instead, cannot be reduced since it has no symmetry, see ). Numerical simulations and analytical solutions (,  Section II A and Section II B) confirm that the addition of the AR loop to the FFL—leading to a circuit that we call the Feed-Forward Fiber (FFF)—changes its functionality qualitatively, leading to synchronization of genes Y and Z into coherent co-expression. This prediction is confirmed with experimental co-expression profiles in Ref. . The FFF with activator regulations in  has a simple dynamics converging to a synchronized fixed point: all interactions are satisfied meaning that the Heaviside step functions evaluate to 1 and we call this circuit SAT-FFF. Instead, when the autoregulation is a repressor, the loop behaves as a logical NOT gate. When expression is high it inhibits itself shifting to low state. Instead, if it is low it promotes itself to shift to a high state. Hence, the activity of this gene oscillates indefinitely [, ]. This is the simplest expression of  [, ], a core concept in physics which refers to a system which is always in tension and thus never reaches a stable fixed configuration. A biological transistor as a core building block To understand the computation rationale of symmetric and frustrated circuits made of repressors, we map them to electronic analogues. We begin the analogy with the simplest circuit of a single gene with a feedback loop with repression (AR loop, ). The dynamics for the expression level  is described by the discrete time model with Boolean interaction :

Here,  is the degradation rate of the Y gene product,  is the maximum expression rate of gene Y, and  is the dissociation constant. The Heaviside step function ( − ) reflects the repressor autoregulation in the Boolean logic approximation. We will show that this genetic repressor interaction, shown as the stub in , is the genetic analogue of a solid-state transistor shown in . A transistor is typically made up of three semiconductors, a base sandwiched between an emitter and a collector (). The current flows between the emitter and collector only if voltage applied to the base is lower than at the emitter ( < ) and thus the transistor acts as a switch and inverter. In the genetic circuit, the expression  drives the rate of expression of gene Y, like the voltage drives current around an electric circuit. Simply comparing  to the pnp transistor in  leads to the analogy in which the expression  is an analogue for the base potential  of a transistor,  an analogue for ,  an analogue for the emitter current ,  an analogue for , and Δ an analogue for . Then,  provides the genetic equivalent of the equation for a transistor’s collector current  =  −  (). The repressor AR genetic circuit of  becomes a one-stage ring oscillator () where the collector of the transistor connects to the base forming the minimal signal feedback loop. As shown in , an example of the AR is the gene Y =  from the  transcriptional network. The repressor AR loop can be extended to the FFF by symmetrizing it, adding gene Z, such that it synchronizes with Y to express an enzyme that catalyzes a biochemical reaction (). The circuit is completed with the external regulator X which keeps the symmetry between Y and Z. The resulting circuit is called UNSAT-FFF (since it is frustrated). The UNSAT-FFF maps to the so-called Widlar current-mirror electronic circuit shown in , a popular building block of integrated circuits used since the foundations of the semiconductor industry (1967 US patent [, ]). It serves two key functions as we show below: mirror synchronization of  =  and oscillatory activity ( and  Section III). 10.1371/journal.pcbi.1007776.g002 Mapping between electronic and biological transistor. A: A pnp transistor allows current flow if the voltage applied to its base is lower than the voltage at its emitter ( < ). Since it has a high (low) output for a lower (high) input, it is logically represented by a NOT gate. The yellow box shows the mapping between the pnp transistor and the biological repressor. B: A repressor regulation link plays the role of the pnp transistor since the rate of expression of a gene is repressed by gene Y if  < . C: By connecting the base of the transistor to its collector, one forms a one stage ring oscillator. D: This connection is translated to the biological analogue as a repressor autoregulation at gene Y. In this way, the rate expression of gene Y is able to oscillate, depending on the adjustment of parameters ,  and  (see  Section III). E: Widlar current-mirror circuit and F: its biological analogue (UNSAT-FFF). By mirroring the ring oscillator, the Widlar mirror circuit allows synchronization and oscillations (see  Section III). G: Phase diagram of oscillations of the UNSAT-FFF. An oscillatory phase is defined by the condition / > (/) (see  Section III). For instance, on the right side, we plot the solution of the discrete dynamics for a set of parameters satisfying such condition. Specifically,  = 0.205,  = 0.454,  = 0.454,  = 0.5, and  = 1.0. UNSAT-FFF solution oscillates and synchronize Next, we show analytically and numerically that the UNSAT-FFF circuit has an oscillatory solution plus synchronization of genes Y and Z.  Section III A shows that the prediction of oscillatory behavior can be obtained also from a model of gene expression in the continuum time-domain using a first-order ODE model with time delay due to the process of transcription and translation. Below, we focus on the discrete dynamics. The UNSAT-FFF circuit is obtained by the addition of a repressor AR loop to the FFL: in , gene Y acts as a repressor regulator on the gene Z and on itself. There are many variants of this circuit depending on the combinations of activator and repressor regulators. Here, we use X gene as an activator and Y gene as a repressor. Different variants yields analogous results and will be discussed elsewhere. The important ingredient is the existence of frustration in the interactions. For instance if gene X is high, then it will make genes Y and Z high too. However, this configuration does not satisfy the repressor autoregulation bond neither the repression from Y → Z. Thus, two bonds are unsatisfied and this circuit unsatisfied: UNSAT-FFF. The discrete-time dynamics of the expression levels of genes  and  are given by:

where  and  are the strength of the interaction (maximum expression rate) of genes  and , respectively, and  and  are the dissociation constant, respectively. Similarly to the SAT-FFF case, synchronization between  and  occurs for the UNSAT-FFF (see  Section II). However, the impact of the repressor feedback loop on the dynamical behavior of this circuit is more profound, since it leads to oscillations. Thus, while both, SAT-FFF and UNSAT-FFF, lead to synchronization of Y and Z, the former synchronizes into a fixed point and the later into an oscillatory limit cycle. We set λ = /
, and  = 1 − , so that we rewrite  for the rescaled variables  = / and  = / as

Now, we set  =  constant in time for simplicity. For  < , the solutions exponentially decay as  =  and  = , where  is the initial condition. For  > ,  defines an iterative map which satisfies the following recursive equation:

This iterative map results in different solutions depending on the value of λ. We consider first the case where the initial condition is  > 1. Thus, the solution of  is  = , where  = −log(1 − ). This solution is correct as long as  > 1, but ceases to be valid at a certain time * such that  < 1, which is given by * = ⌈ log ⌉. Next, we consider the case  < 1. In this case the solution is given by  =  + λ(1 − ), which is always valid for λ < 1. Thus, when λ < 1 the system does not oscillate but it converges monotonically to a fixed point  = λ. However when λ > 1, this solution ceases to be valid at the time  such that  > 1. Therefore, the solution  oscillates in time for λ > 1. For the case of  > 1, the explicit solution is given by the general analytical expression which is plotted in , right:

The general solution with initial condition () < 1 can be written in a similar way. Thus, the main condition for oscillations in the circuits is λ > 1, and if λ < 1, there is no oscillatory behavior, and the solution  converges monotonically to λ. Therefore, the oscillatory phase is separated from the non-oscillatory phase by the condition:

which is depicted in the phase diagram in , left. https://github.com/makselab/FiberCodes https://github.com/makselab/FiberCodes Thus, the repressor autoregulation at gene Y converts the circuit into a synchronized clock, a primary building block in any logic computational device.  Section V and  show all FFFs found across gene regulatory networks of the studied species spanning , , , , , , mouse and humans. We also show in  the count of circuits across species and their associated Z-scores showing that these circuits are statistically significant. The algorithm to find these  in biological networks is explained in  and  Section IV and it is available at . 10.1371/journal.pcbi.1007776.t001 Symmetric circuits () count . We report the Z-scores showing that all found fibers are statistically significant. We use a random null model with the same degree sequence (and sign of interaction) as the original network to calculate the random count  and compare with the real circuit count  to get the Z-score. A broad class of logic and dynamic repertoires in the class of fibers The procedure to build more complex fibers can be systematically extended through an algebra of circuits that adds external regulators and loops to grow the  of symmetric circuits ( and  Section IV A). In this space, the AR is the core loop unit referred to as | = 1,  = 0〉 in the nomenclature of  since it has  = 1 loop and  = 0 external regulator (), and the FFF is | = 1,  = 1〉 (). From this starting point, one can grow the number of regulator genes, |1, 〉 with  > 1. This does not affect the complexity because all the relevant dynamics remain constrained to the sole loop in the FFF circuit. Likewise, there are a number of circuits that can correspond to |1, 1〉. However, only certain modifications conserve the topological class identified by |1, 1〉. For instance, changing the sign of the edges is allowed as long as the edges of each gene are the same, but removing the edge X→Z will break the symmetry of the fiber, so it is not allowed. Adding a second node downstream of Y will conserve the topological class but only if it interacts with X. This situation changes as soon as the  feeds information back to the external world. This is the case of the circuits in , where the gene Y now regulates its own regulator gene X. The inclusion of this second feedback loop results in the coexistence of two time-scales in the network. This, in turn, increases the diversity of trajectories and delays in the network; a dynamic complexity that is measured by the divergence of the input tree, which is captured by the sequence  representing the number of source genes with paths of length  − 1 to the target gene, see  and . Simply put, the input tree is a rooted tree with a gene at the root ( = 1), and  represents the number of genes in the −th layer of the input tree. Then, the divergence of the input tree is captured by its branching ratio measured by , see  for details. A quantitative analysis of this measure yields exactly the golden ratio  for the circuits in , revealing that the input tree is a Fibonacci sequence  =  +  updating the current state two steps backwards, see . We have called this class of circuits, Fibonacci Fibers, in . For example, the repressor interactions between genes X = , Y = , and Z =  from the  network function exactly as a Fibonacci Fiber (). Other typical examples of Fibonacci Fibers in the transcriptional networks across species are also shown in .  Section V and  show all found , and  the counts for all  and their associated Z-scores showing that these circuits are statistically significant. The important component of these circuits is the delay in the feedback loop through the regulator from Y → X and back to Y captured by the  term in the Fibonacci sequence. This circuit has been synthetically implemented by Stricker .  using a hybrid promoter that drives the transcription of genes  and  forming a dual-feedback circuit. The functionality of this circuit has been demonstrated to be robust oscillations due to the negative feedback loop . We will show next that a symmetry breaking in this Fibonacci circuit forms the  of the JK flip-flop, which is the universal storage device of computer memories . The complexity of the Fibonacci Fiber with feedback to the regulator is 1.6180…, which is lower than the number of loops in the circuit (two). The intuition of what this reveals is that, in this circuit the regulator X is still not part of the  (see ), since it does not receive input from itself and hence it is not within the symmetry of the . This, in turn, indicates naturally that the next element in the hierarchy of  results from the inclusion of an AR loop in X. This creates a fully symmetric circuit () with a core |2,  = 0〉 that feeds the reporter/enzyme Z. In this case, the complexity of the circuit is exactly two (the number of autoregulators within the ). Examples are shown in  and Supplementary Materials. 10.1371/journal.pcbi.1007776.g003 Symmetric circuits  function as clocks. The addition of autoregulation loops and feedback loops results on a hierarchy of circuits of increasing complexity. For example, turning the A: repressor link into a B: repressor autoregulation results on an input tree that feeds its own expression levels with  = 1 and branching ratio  = 1 and it is equivalent to its own . C: The addition of an external regulator ( = 1) creates the UNSAT-FFF where genes Y and Z synchronize and oscillate. This can be verified in its corresponding input tree and logic circuit. D: The addition of a second feedback loop results in an input tree that follows the Fibonacci sequence  = 1, 2, 3, 5, 8, …. Here, gene X is not part of the . The branching structure of the input tree implies that the Fibonacci Fiber can oscillate and synchronize, but is unable to store static information. Examples are shown from all studied species. E: The second autoregulation at X results in a symmetric input tree with  = 2 and branching ratio  = 2. This  collapses into a  with two autoregulators. Examples of  = 2 Fiber are two  from the regulatory networks of . In this figure, we present activator links (black), repressor links (red), and interactions with unknown functionality (grey). Broken symmetry circuits as memory storage devices All symmetric circuits shown in   work as clocks with varying levels of sophistication and robustness given by their time-scales or loops (see  Sections III C and IV A). Additionally, the more complex Fibonacci Fibers store memory dynamically by integrating sequences of its two immediate past states, according to the input tree, which computes temporal convolutions. However, this is only a short-term memory, stored dynamically and continually erased. This raises the necessity of understanding how these canonical biological circuits can perform controlled memory set and reset, a fundamental component of all computing devices . We show next that static memory storage requires breaking the fibration symmetry of each circuit creating structures analogous to ‘flip-flops’  in electronics that use a bistable toggle switch [, ] to store a bit of binary information into computer memory. As we show below, in genetic networks, symmetry breaking endows the circuits with the ability to remember. Next, we extend the constructive process described above to include symmetry breaking. We do so by mimicking an evolutionary process where circuits ‘grow’ by a ‘duplication’ event (analogous to gene duplication in evolution) that conserves the  of the original circuit (, first and second row). Then, breaking the symmetry creates a new functionality. We begin this with the simplest case of AR gene Y: | = 1,  = 0〉. This gene is duplicated by ‘opening up’ the AR loop into two mutually repressed replica genes, Y and Y’ (, second row). This creates a bistable toggle switch as studied in synthetic genetic circuits [, ] that is topologically equivalent to the core AR loop |1, 0〉 since both have the same input tree and  (, first row). The symmetry of the replica circuit is then explicitly broken by including different inputs, S and R, to regulate genes Y and Y’, respectively (, third row). S and R represent either genes or effectors that break the symmetry of the circuit. Symmetry is now broken, and the genetic circuit becomes analogous to a Set-Reset (SR) flip-flop , the simplest canonical circuit to store a bit of binary information in electronic computer memory (see , fourth row). The symmetry is explicitly broken by applying set-reset inputs S ≠ R. Specifically, when S = 1 and R = 0, the circuit stores a bit of information. But here is the interesting fact: this state is kept in memory even when S = R = 1. That is, the circuit remains in the broken symmetry state even if the inputs are now equal and symmetric. In other words, the symmetry is now ‘spontaneously’ broken , since a specific state is selected even without external bias, thus allowing the circuit to remember its state. Thus, this genetic network is a toggle switch as studied in synthetic genetic circuits [, ] analogous to the SR flip-flop logic circuit shown in , fourth row. When the controlling inputs are  = 0 and  = 1, the SR flip-flop stores one bit of information resulting in  = 1 and  (, and the output  is the logic conversion of 
). The SR flip-flop retains this logical state even when the controlling inputs change. In other words, when  = 1 and  = 1, the feedback (the repressor interactions between Y and Y’) maintains the outputs  and  to its previous state. This state changes only when we reset the circuits with  = 1 and  = 0. In this last case, the SR flip-flop stores  = 0 and , which is also remembered when both inputs are high ( = 1 and  = 1,  Section IV B). https://github.com/makselab/CircuitFinder https://github.com/makselab/CircuitFinder This spontaneous symmetry breaking  has analogy with a ferromagnetic material. When the temperature is high enough, the ferromagnet does not show any magnetic property. Moreover, even lowering the temperature, in absence of any polarizing field, the material does not magnetize. On the contrary, if an external magnetic field is applied to the ferromagnet, like a magnet put in contact to a needle for enough time, and then removed, then the needle becomes magnetic itself, in that it remembers the direction of the previously applied magnetic field, thus breaking, spontaneously, the rotational symmetry. Biological realizations of this replica symmetry breaking process are shown in , last row. Full list of symmetry broken circuits in gene regulatory networks across species appears in  Section V and .  shows the Z-scores of these circuits indicating their significance. The algorithm to identify these broken symmetry flip-flops in biological networks is developed in  Section VII and is available at . Extending this duplication and symmetry breaking process to the FFF (, second column), one can replicate the X and Y genes from the FFF  to create a circuit isomorphic to the Clocked SR flip-flop, another computer memory building block  (see  Section IV B). The symmetry is broken by regulators or inducers of genes X and X’ acting as S (set) and R (reset) of memory, and it is restored when S = R, leaving the system ‘magnetized’. The hierarchy continues by replicating the Fibonacci Fiber and consequent breaking of symmetry when the inputs J and K are different ( third column, see  Section IV B). This structure is isomorphic (i.e., has the same ) to the JK flip-flop in electronics, which is the most widely used of all flip-flop designs . In its symmetric state, the JK flip-flop is isomorphic to the symmetric Fibonacci . In the symmetry broken phase, it acts as a memory device which presents two possibilities. A ‘chiral’ symmetry (where Y feeds X and Y’ feeds X’) and a ‘parity’ symmetry (left-right reflection, where Y feeds X’ and Y’ feeds X). This last one is the one realized in biological circuits, see , third column. Examples of JK flip-flops are abundant in gene regulatory networks in human and mouse. They are shown in , last row and full list in  Section V, , and Z-scores in . 10.1371/journal.pcbi.1007776.g004 Broken symmetry circuits function as memory. : The replica symmetry duplication of the AR symmetric circuit results in a network that is analogous to the SR flip-flop circuit. The symmetry between Y and Y’ is broken by the inputs S and R, such that S ≠ R, resulting into a pair logical outputs  and . : Following the same strategy, we replicate the FFF through a replica symmetry duplication. Note that this operation adds a second level of logic gates to the SR flip-flop. In order to have consistent logic operations, we add an input clock gene CLK in addition to S and R. The resulting circuit is analogous to the Clocked SR flip-flop logic circuit. : The replica symmetry duplication of the Fibonacci Fiber results in a logic circuit which is analogous to the JK flip-flop. For each symmetry breaking class, we show two examples of circuits from the human regulatory network. The external regulator genes, S and R (J and K), provide inputs which are logically processed by the circuit, accordingly to the type of interaction links between the genes, activators (black arrows) or repressors (red flat links). The outputs of the circuits (green genes) regulate the expression levels of other genes (in red) without affecting the circuit functionality. Here, grey arrows correspond to interactions with unknown functionality. 10.1371/journal.pcbi.1007776.t002 Broken symmetry circuits count. We report the corresponding Z-score statistics as computed in . In summary, fibration symmetries and broken symmetries in gene regulatory networks reveal the functions of synchronization, clocks and memory through electronic analogues of transistors, ring oscillators, current-mirror circuits, and flip-flops. They result in a hierarchy of building blocks with progressively more complex dynamics obtained by iterating a procedure of replication and symmetry breaking. Beyond the circuits discussed here, the biological hierarchy can be extended to any number  of loops of length  and autoregulators in the 
, to form ever more sophisticated circuits whose complexity is expressed in generalized Fibonacci sequences  =  + . Gene regulatory structures are a mixture of combinational logic circuits, like FFF, and sequential logic circuits, like FF. They provide the network with a structure analogous to a programmable logic device or chip where the ‘register’ is a set of flip-flop circuits tied up together acting as the memory clock of the genetic network that feeds the combinatorial logic circuits made of simpler feed-forward circuit of low symmetry. Complex biological circuitry can then be seen as an emergent process guided by the laws of symmetry that determine biological functions analogous to electronic components. The discovery of these building blocks and building rules of logic computation will allow to: (1) systematically design synthetic genetic circuits following biological symmetry, and (2) systematically map the structure and function of all biological networks, from the symmetries of the connectome  to genetic , protein and metabolic networks, following a first principle theoretical approach. Detailed description of all analytical solutions mentioned in the main text, of the data acquisition and treatment, and detailed description of the proposed algorithm to find fibers. Click here for additional data file. List of symmetry and broken symmetry circuits. In S2 File we present a list of circuits found in different species. Click here for additional data file..