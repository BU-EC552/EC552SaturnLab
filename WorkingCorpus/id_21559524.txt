In its development as an engineering field,  is at
a stage where encapsulation has been identified as a fundamental challenge , , , . Encapsulation
will enable design re-use, sharing, and software tool development, all of which
greatly increase synthetic biology's ability to grow both in complexity and in
community size. Encapsulation has been shown to be very important in other
engineering disciplines , , . We present a domain specific programming language called
Eugene meant to encapsulate biological ,
, and  paving the way for
, , and
. One popular encapsulation view in synthetic biology is that DNA sequence information
can be encapsulated as a . Parts are well defined regarding the
way in which they can be physically composed to create 
, . Parts and
Devices then can be re-used in various designs, thus encouraging the development of
new larger constructs for the community (see ) . The process of developing
standardized and well-characterized Parts is a key challenge, and community efforts
in this direction have been undertaken through the BioBricks Foundation™
(), the OpenWetWare initiative (), and the International Genetically
Engineered Machine (iGEM) competition () . pone.0018882-SangiovanniVincentelli1 Eugene (a play on the Greek prefix “” meaning
“good” and the word “gene”) is a human readable, executable
specification ,
which reflects the creation of systems by defining, specifying, and combining
collections of Parts. Eugene is inspired by the languages of the Electronic Design
Automation (EDA) ,  industry (e.g.
Verilog 
and VHDL )
in terms of its ability to provide a biological design  (a
collection of components and their connections). This can be
 (automatically transformed) into collections of
physical implementations in a design library . Eugene development has focused on: This paper is organized around these three areas as shown in . 10.1371/journal.pone.0018882.g001 Encapsulation based synthetic biology design hierarchy. Shown are the various layers of abstraction at which Eugene operates. DNA
information forms the most basic unit on which everything else is built
(e.g. the genetic code, as specified by bases G, A, T, and C). This is
followed by Parts. Parts are non-reducible elements of genetic composition
(e.g. promoters, ribosome binding sites, open reading frames, etc). Devices,
which can contain one or more Parts, are the next level in the hierarchy.
Finally, Devices are followed by a  view that
contains collections of Devices. The traversal upward in the hierarchy
represents an abstraction process while a downward traversal represents the
refinement process. Eugene currently operates at the Part and Device levels
via explicit Part and Device data types while encapsulating the DNA level as
Eugene Properties. 10.1371/journal.pone.0018882.g002 Eugene based synthetic biology design flow. Shown here is the role that Specification, Design, Assembly, and Data can
play in synthetic biology. In particular, we illustrate that Eugene is
concerned with the activities at the specification level explicitly but at
the same time it is designed in such a way that it develops designs that are
amenable to other pieces of this design flow. Opportunities for the flow to
provide feedback to earlier stages and perform iterative refinement are
outlined in red. 10.1371/journal.pone.0018882.g003 This paper is organized around three sections which reflect a Eugene
design flow. The  section provides an overview
of how to use Eugene to create a Device using a T4 lysis Device from the MIT
parts registry. The  section
illustrates design space exploration with a  system from UC Berkeley's 2009 iGEM team. The
 section also details
integration of Eugene with automated assembly in Clotho for a protein
tagging system and simulation via SynBioSS for a repressilator design. Flexible Part and Device specification and composition (see  and ). Combinatorial design space exploration of Devices using an expressive system
of Rules  (see ). Interaction with other tools for simulation and automated assembly (see  and ). Eugene is composed of , ,
, and . These elements are
outlined in  along
with a brief explanation. For the sake of brevity, we cannot cover this material
in depth. For more details, see the , ,
and ,
which are devoted to covering Eugene's inner workings. To provide the reader with the required understanding of Eugene, we will step
through the creation of a “T4 Lysis Device with Pbad as the inducible
Promoter”. This is a  and can
be retrieved as  in the MIT Registry of Standard
Biological Parts (). Before beginning, it should be pointed out that there are two approaches to
design in Eugene: Our example follows the TDD paradigm in the interest of clarity. 10.1371/journal.pone.0018882.t001 Eugene language elements overview. txt variables store strings of zero or more
characters. txt message  =  "hello
world";txt sequence  =  "ACTG"; num variables store numbers, both integer and
floating point boolean values are either true or false. txt and num are arrays of
the corresponding singleton primitives. txt str_array  = 
["A", "CG", "T"];num num_array
 =  , , , ;num num1  = 
num_array[0]; Property definitions assign names to possible
properties of Parts. Properties have a name and map to a
primitive type. Property ID(num);Property sequence(txt);Property
strength(num); Part definitions define the fields of a type of
Part. The fields are defined by using pre-defined
properties. Part Promoter(ID, sequence, strength);Part CDS(ID,
sequence); Once a part type is defined, instances of that Part
type can be declared, initialized, and used. Promoter P1(1, "TATATA", 30);CDS GFP(1,
“ATG…”); Devices represent a composite Part. They can
include both parts and other Devices as subcomponents. Devices
are ordered 5′ to 3′. Device BBa_1(P1, GFP);BBa_1[0];
//References P1 Rule declarations use rule operators (such as
BEFORE and CONTAINS) to describe constraints on Devices. Rules
need to be declared before they can be used. Rule R1(P1 BEFORE GFP);Rule R2(BBa_1 CONTAINS
P1); Once declared, rules can either be asserted or
noted. Asserted rules throw an exception when the rule is not
satisfied, while noted rules print an error message. Header files containing predefined
properties, Part definitions, and Part declarations in separate
files can be imported into a Eugene file. A simple print function to allow output of
data. print("hello world");print(P1); Permute creates all the permutations of a given
Device. This is done by swapping out each component part of a
Device with other instances of the same Part type. Device BBa1(P1, GFP);permute(BBa1);BBa1_2;
//Accesses the 2nd permutation A short summary of the Eugene language specification is provided.
While not a complete explanation, this table highlights key features
and shows how the elements are organized. A complete description of
both the language and technology used to implement it can be found
at . Further examples can be
found in the . – BUD begins with low-level
Properties, creates individual Parts, and then creates Devices. BUD is
how libraries of Parts in Eugene will be created but requires a very
detailed understanding of the system being created . – TDD begins by specifying the
Devices of interest and then instantiating Parts, and finally specifying
the Properties that make up the Parts. TDD is a very natural way to
design systems, but in the absence of the lower- level elements the
design is incomplete. Step 1: Specify the Header Files These files encapsulate information on libraries of Eugene design elements at
your disposal. Eugene comes with pre-created sample Header Files. Users can
create their own Header Files manually or automatically (more in the ). Here the
Header Files are divided into categories detailing what they contain. This
separation is not a requirement. include PropertyDefinition.h, PartDefinition.h,
PartDeclaration.h; Devices are collections of 1) Parts or 2) other Devices. These must be
specified in the body of the Eugene code or in a Header File. Here the
Device is composed of eight Parts (ordered from 5′ to 3′). This
syntax includes the Device type along with the name (for readability) but
the type is optional (see  for alternate syntax). Step 3: Instantiate the Part(s) This entails specifying the Property values of the Part(s). This can be done
in the main body of the code or in the Header File. In this case, it will be
inside of . For brevity, we only show the
sixth of the eight parts in the Device. All eight Parts will have to be
specified. Alternate syntax without explicitly assigning values to
Properties exists as well (see ). Promoter BBa_J23116(.ID("BBa_J23116"), .Sequence("GATCTttgacagctagctcagtcctagggactatgctagcG"), Parts are collections of Properties. This again can be captured in Header
Files (e.g. in ) or in the main body. Here
we show all four Part types in the design. It is the job of the designer to
decide which Properties make up the individual parts. Notice the
“Promoter” Part has a Property “Inducible” which can
remain unspecified in Step 3. Part Promoter(ID, Sequence, Orientation,
Inducible); Part ORF(ID, Sequence, Orientation, CDS); Part RBS(ID, Sequence, Orientation); Part Terminator(ID, Sequence, Orientation,
Strength); Properties are text, number, or Boolean values (either arrays or single
values). These represent biological characteristics associated with the
design. They can be manually specified or pulled from repositories (more in
the ). The final design for  is shown in . Ten experimentally created Devices representative of MIT's Registry of
Standard Biological Parts were created to explore the process of specifying
Devices using Eugene.  in file  captures this exploration.
Specific information on these Devices and the Eugene code for their designs
can be found in the . The purpose of this exercise was to display the significance in the
separation of Part and lower level Property information, which is hidden in
the Header Files, from the Device level construction in the main Eugene
file. As a result of this separation, an average of 
less code is utilized in the main file. At the same time, the ratio of DNA
base pairs to total lines of code 
implies the portability of very complex designs to other tools or systems.
Sharing designs becomes much easier, since the creation of an underlying
data structure and programming interface is achieved automatically when
Eugene designs are interpreted. The design interpretation times are very
reasonable . We have confidence that as
designs move to encompass tens or hundreds of devices, the interpretation
time will remain very reasonable. 10.1371/journal.pone.0018882.g004 We illustrate both visually (SBOL visual; ) and textually (Eugene
code) an example Device ( from the MIT
registry of standardized parts. Key to notice is the fact that the three included header files
encapsulate much of the design effort leaving a single line to
produce the composite Device. The  section illustrates how to
specify Devices with Eugene. This is only one very limited aspect of Eugene.
 is Eugene's primary
task. DSE in this context consists of two phases: A  system built by the UC Berkeley Wetlab
2009 iGEM team went through the DSE process. This cell surface display system
exposes various peptides or proteins to the extracellular environment by
anchoring them to the outer membrane of . The genetic
Device for such a system is composed of three categories of protein domains:
, , and
. An example of such a Device is
shown in . The
individual Parts for this Device are explained briefly in Table 2 in the file
. – This phase creates new Devices with
Eugene's  function. Permute goes through
each of the individual Parts making up a Device and creates new Devices
with other Part instances of the same type as the original Device. – This phase systematically reduces the
Devices created with Eugene via the application of Rules. Rules specify
desired Device compositions or Part Properties. Rules and
 can be combined to prevent certain
permutations. 10.1371/journal.pone.0018882.g005 Illustration of the “cell surface display” Device case
study. Here are shown the three Part types (passengers, spaces, and displayers)
which when combined into a Device made up the systems that we explored.
As shown the displayer interacts with the outer membrane of the
bacterial cell to display the passenger protein extracellularly. Table 2
in file  provides more information on this system. There are two types of cell surface display Devices (more details in the ): //A passenger/spacer/displayer/terminator Device Device DeviceType1 (PassNeedle, SpacerINP, Disp_upaG,
T01); //Permute this device to switch out each Part instance //A passenger/displayer/terminator Device Device DeviceType2 (PassNeedle, Disp_upaG, T01); These four lines of code generate  created from the basic
Parts specified initially in Eugene.  illustrates both how our initial
design space consisted of these two devices created with two lines of code, as
well as the increase to 540 Devices with the addition of two permute functions
(four lines total). 10.1371/journal.pone.0018882.g006 Device exploration and pruning capabilities with Eugene. This graph shows how the number of Devices created with Eugene can change
with the addition of rule statements. The change in many cases can be
quite dramatic with relatively few lines of code (new rules). For
example with just two lines of code the initial design space explodes
from two devices to 540. Then with 13 additional lines, it drops to 135
Devices. Finally, a design space of three Devices can be achieved by a
total addition of 28 lines of code while still maintaining the original
information to specify 540 Devices. is a  showing the results of assaying cell surface display Devices
for functionality depending on the type of passenger used in the Device. The
quantitative data sets from these assays were normalized to an appropriate
control and can be used to analyze the functionality of each combination of
passenger, displayer, and spacer element. In order to reduce the design space from the original 540 Devices to the
 in , we added an additional 
() composed of
Rule statements. The full list of these statements is in the  and a sample is
provided here: //Rules forbidding Ag4, Leucine Zipper, and Cellulase
passengers Rule NoAg4(NOTCONTAINS PassAg4); //Removes 90 Devices Rule NoLeu(NOTCONTAINS PassLeu); //Removes 90 Devices Rule NoCell(NOTCONTAINS PassCell); //Removes 90
Devices //Rules forbidding certain passenger/spacer combos //Do this for all 5 spacers; removes 75 devices Rule NeedleSpacers1-5(PassNeedle NOTWITH SpacerY); //Do this for all spacers but INP repeats; removes 60
devices Rule StrepSpacers1–4(PassStrep NOTWITH SpacerY); Assert(NoAg4 AND NoLeu AND NoCell AND NeedleSpacers1–4 AND
StrepSpacers1–4); We next reduced these Devices to six sets of fifteen Devices (). These sets were combinations of three types of passengers,
fifteen displayers, and three spacers. This reduction required the following
: //Removes 45 Devices in 4 lines Rule MgfpSpacers1(PassMgfp NOTWITH SpacerGly-Ser); Rule MgfpSpacers2(PassMgfp NOTWITH SpacerGfp-Iva); Rule StrepSpacers5(PassStrep NOTWITH SpacerINP); Assert(MgfpSpacers1 AND MgfpSpacers2 AND
StrepSpacers5); To remove the inactive Devices (dark areas on ), we add the following  to reduce the space to : Rule Rule1((PassMgfp WITH SpacerBeta-Roll) OR (PassMgfp WITH
SpacerBeta-Helix) OR (PassMgfp WITH SpacerINP)); //Removes 15
Devices Rule Rule2((PassStrep WITH Disp_Vta) OR (PassStrep WITH Disp_ehaB) OR
(PassStrep WITH Disp_CPG6) OR (PassStrep WITH Disp_AIDA)); //Removes 11
Devices Rule Rule3((PassNeedle NOTWITH Disp_cl) AND (PassNeedle NOTWITH
Disp_Pcryo) (PassNeedle NOTWITH Disp_CPG6)); //Removes 3
Devices Assert(Rule1 AND Rule2 AND Rule3); To prune the entire lower half of , only one line is required. There are no highly active
Devices in this region. This removes the need for Rule 1 for a net gain of
 and leaves . Rule Rule4(NOTCONTAINS PassMgfp); Finally, to reduce the design space to only the , we add . //Removes all but the last 3 Devices Rule Rule5((PassStrep WITH Disp_CPG6) OR (PassStrep WITH
Disp_AIDA)); Rule Rule6(PassNeedle WITH Disp_upaG); With more data on these Parts, such as molecular weight, shape, efficiency, and
data relevant to surface displayers, we could create more informative
Properties. This would lead to more detailed, powerful rules in the future.
These rules would allow more specific pruning of the combinatorial space, and
the ease and specificity of the reduction would be greater still. 10.1371/journal.pone.0018882.g007 A heat map depicting the functionality of the cell surface display
Devices, where the white constructs had the highest signal of
functionality. This data was used to determine which Devices could be considered
functional and which were not. This analysis helped to drive the
development of the Eugene code. The overlaid annotations reflect a
reduced heat map. This shows how Devices can be removed with the
targeted application of Eugene rules. The entire design space of 90
Devices is a reduction from the original heat map's 135 Devices.
Each area is labeled with the rules that affect the creation of these
Devices. Rules 1-4 deal with the removal of Devices while Rules
5–6 preserve the final three highly active Devices. The x-axis is
displayer domain parts and the y-axis is protein/spacer
combinations. Assembly and Simulation Integration As shown, Eugene ultimately produces collections of Devices which both adhere to
specific constraints and encapsulate Parts and Properties. There are two natural
next steps in the design process: – 1) Determine an optimal global
assembly strategy for all Devices . 2) Create
assembly files for a liquid handling robotic platform . illustrates this design flow. This was carried out
with the help of Clotho , ,
(). – Convert the underlying Eugene
 to an exchange format for external
simulation programs. We illustrate this process with the Synthetic
Biology Software Suite (SynBioSS) . 10.1371/journal.pone.0018882.g008 Illustration of an automated assembly flow beginning with a Eugene
file for a protein tagging (PT) Device with nTag and cTag Parts. This shows the eight Parts that make up the Device and the order in which
the Parts must be assembled to have a functional Device. In the Eugene
import process, the Devices of interest are captured with Eugene and
processed by a Clotho App (e.g. Spectacles). Later the Device
construction is planned for a specific assembly protocol with the
creation of an assembly graph. In the final phase, the files for a
liquid handling robot are created and fed to the platform doing the
assembly. We created a “protein tagging” (PT) system which uses combinatorial
tagging of ORFs to optimize protein expression and purification, and test
protein-protein interactions, by quickly creating iterations of functional
designs. Our PT systems consisted of the components types in Table 3 in file
. Devices were created so that each Device would encode two different ORFs where
each was tagged with a different tag, either on the N- or C-terminus of the ORF.
Tags were always separated from ORFs by a protease cleavage site (such that tags
and ORFs can be physically separated from each other). Thus, each ORF-tag combo
is made of three basic parts (one ORF, one tag, and one cleavage site between
them). Therefore, a two ORF-tag architecture contains six basic parts. Since
proper protein expression of a Device also requires a promoter and a terminator,
each Device consists of eight basic parts in total (the six above, plus a
promoter, plus a terminator). In all cases, the first Part is always a promoter,
and the last Part is always a terminator. The order of the six middle Parts
varies according to the desired topology of the ORF-tag combos.  shows an example PT
Device topology and sample Eugene code follows: //Topology 1: Two nTag configuration Device deviceTypeNN(P, nTag, CS, OS, nTag, CS, OS, T); //Topology 2: Two cTag configuration Device deviceTypeCC(P, RSO, CS, cTag, RSO, CS, cTag,
T); //Topology 3: cTag then nTag configuration Device deviceTypeCN(P, RSO, CS, cTag, nTag, CS, OS,
T); //Topology 4: nTag then cTag configuration Device deviceTypeNC(P, nTag, CS, OS, RS0, CS, cTag,
T); These four Device types result in  using Eugene's
permute function. We next use Rules to prevent the same antibody type of nTag or
cTag from appearing in a Device. These Rules take three forms (where X is the
specific tag antibody from the 12 different Part choices): //These rules prevent specific tag combinations Rule r1a(ctagX NOTWITH ntagX); //for CN and NC type
Devices Rule r1b(ctagX NOTMORETHAN once); //for CC type
Devices Rule r1c(ntagX NOTMORETHAN once); //for NN type
Devices This reduces the number of Devices to . We were only
interested in Devices with distinct protein-tag set combinations. This is a
total of . See the  for the complete Eugene code. Automated assembly for Eugene based Devices occurs as follows (): The assembly was carried out in 3 separate rounds (or stages) of assembly. In
stage 1, we used 31 basic Parts to assemble 56 composite Parts (made of 2 basic
Parts each). In stage 2, we used the Parts made in stage 1 to assemble 48
composite Parts (made of 4 basic Parts each). In the final stage, we used the
Parts made in stage 2 to assemble 528 composite Parts (made of 8 basic Parts
each). All 528 bi-cistronic operons contained a total of 3696 junctions between
parts, out of which 632 were unique. Assuming $3 a Part junction and an
amortized time of 10 minutes per part junction, we estimate that this saved
around 
($11,088-$1,896 = $9,192) and
 (36,960 min-6,320 min = 510 hrs).
This is considering that the 528 constructs made contained a total of 3696
junctions between Parts, but of those only 632 were made since unique junctions
only need to be made once. Create Device specifications in Eugene using Header Files created by a
Clotho compatible database. Use a Clotho App (e.g. Spectacles  or Eugene Scripter) to
read in the Eugene code. Clotho assembly algorithms  produce files for
liquid handling robot based on information provided by the Clotho
connection to the database (e.g. well location, sample volume, etc). For simulation, we chose to look at a classic genetic regulatory network, namely
a “repressilator” . The example repressilator used here is based on a
lac-tet-ara oscillatory network examined by Tuttle et al . The overall behavior is
that LacI represses the expression of TetR, which represses the expression of
AraC, which in turn represses expression of LacI. See  for an illustration of a
repressilator. We decided to examine a repressilator because its behavior is
well understood and it can be composed of primitive parts. It also provides a
point of comparison with other tools in the literature (e.g. GEC ). We use SynBioSS for this investigation but Eugene
could be used with a variety of simulation tools SynBioSS is a software suite for the generation, storage, and quantitative
simulation of synthetic biological networks. One component of this software
suite, called SynBioSS Designer, uses biological rules to create a reaction
network given a series of biological parts, such as promoters and ribosome
binding sites, and the spatial and temporal connectivity of these parts . This
reaction network represents the transcription, translation, and regulation
occurring in the system. SynBioSS Designer outputs this reaction network as
either a NetCDF or SBML file to be used in simulation software of the
user's choice.  (e.g. Tinkercell
). The Eugene code for this design is provided in the . We provide a small sample here to give the
reader a feel for some key elements of the repressilator design. The following Property definitions form the pool of parameters to be associated
with Parts in the repressilator: Property Sequence(txt); //The DNA sequence for the part Property Neg35StartEnd(txt); //Promoter information Property Neg10StartEnd(txt); //Promoter information Property OperatorSites(txt); //An array of promoter
information Property Corresponding Protein(txt); //Which protein the part
produces Property ProteinBindingInfo(txt); //Protein interaction
information The following Part definitions form the set of Part types in the repressilator
and the Properties associated with them: Part Promoter(Sequence, Neg35StartEnd, Neg10StartEnd, OperatorSites,
OperatorSiteLocations); Part CodingDNA(Sequence, CorrespondingProtein,
ProteinBindingInfo); The following example Part declarations specify the actual physical Parts in the
repressilator: Promoter araP(); //lacI and tetR promoters created as
well RBS rbs1(); //two other RBS created as well CodingDNA DNAlac(); //tetR and araC ORFs created as
well The following rules constrain Devices to use Parts in such a way to give rise to
the repressilator behavior: Rule promoterToCoding1(araP BEFORE DNAlac); Rule promoterToCoding2(lacP BEFORE DNAtet); Rule promoterToCoding3(tetP BEFORE DNAara); Assert(promoterToCoding1 AND promoterToCoding2 AND
promoterToCoding3); Finally, the repressilator Device is declared with the specific ordering of these
Parts: Device Repressilator(araP, rbs1, DNAlac, term1, lacP, rbs2, DNAtet,
term2, tetP, rbs3, DNAara, term3); SynBioSS Designer loads this Eugene code for simulation. Specifically, Designer
uses SimpleXML to load the XML produced as an artifact of Eugene interpretation.
SimpleXML is a PHP extension which converts XML to an array with the same
structure as the original XML. This array is then manipulated to have a
structure compatible with all of Designer's algorithms. A diagram of this
design flow is shown in . 10.1371/journal.pone.0018882.g009 High-level diagram of a repressilator as well as its Eugene
implementation. Here the relationship between LacI, TetR, and AraC and the promoters in
the system is shown. This design was chosen since its behavior is well
understood and can be easily decomposed into the individual Parts that
make up the Device. The SynBioSS design flow with Eugene is also shown.
Beginning with the Eugene XML produced by the Eugene interpreter,
SimpleXML creates an array which holds the data from Eugene. After a
reorganization process the data can now be transformed by SynBioSS into
a reaction network in SBML or NetCDF which can then be simulated. Sample
of the reaction network generated by SynBioSS Designer is also provided.
These reactions describe the unregulated expression of TetR, as well as
its dimerization and degradation. All rate laws are elementary and all
kinetic data is in SI units unless otherwise noted. Asterisks indicate
gamma-distributed reactions. Eugene is a language in development. We have illustrated a very brief snapshot of its
capabilities. Here are future directions for the language: – It will be important to incorporate
other control statements into Eugene. The language will require the ability to
systematically iterate through lists, which can be achieved through loops. This will
be useful when different combinations of Parts or Devices need to be traversed and
some operations on them performed. - The user should have the ability to
create custom functions as well. This mechanism could resemble other imperative
programming languages. This process would introduce the importance of
 in variables and instances, since functions should only
apply to specific scoped instances of variables. Currently, all variable instances
in a file can be accessed globally. - Another potential strength in a language
like Eugene is the direct access to a database of Parts. By providing an explicit
function to connect to a specified database, we would certainly give more
expressional power to the language. Currently, database access is performed outside
of Eugene by translating XML information from the database to Eugene code. – Currently, the highest level in the design
hierarchy is the “Device Level”. Ideally, we would like to extend Eugene
to contain Systems and the ability to operate on such a level by providing built-in
functions, which will depend on new assembly standards. – Currently, rules are based on Part
 but not Part . For
example, a rule will be based on Promoter P1 but not across all Promoters. In many
cases, it would be much more appropriate to apply rules to Part definitions to not
only save on programming effort but also increase the expressiveness of the
constraint system. – Currently, rules are applied to
Device composition. However, if one wanted to make a rule regarding two Devices,
this is currently not possible. The introduction of a “System” level of
abstraction with System level wide rules could address this. We also are aware that there are a number of existing languages and tools in this
domain. In particular, we consider comparisons to Systems Biology Markup Language
(SBML) ,
Antimony ,
GenoCAD ,
enetic ngineering of living
ells (GEC) , Proto , Tinkercell ,and CellML  particularly
relevant. In the  we
address these comparisons directly. Broadly speaking, we feel Eugene offers certain
advantages in the areas of flexibility, ease of use, interoperability with other
tools, reflection of synthetic biology design flows, and extensibility. We have introduced the Eugene programming language for synthetic biology. In
particular, we have illustrated flexible Part and Device specification and
composition, combinatorial design space exploration of Devices using an
expressive system of Rules, and interaction with other tools for simulation and
automated assembly. We have also provided ample Supplemental Materials with
comparisons to other approaches, additional information regarding our results, a
complete set Eugene designs, and more information regarding how to write Eugene
programs. Eugene is available at  .
This is an open source project covered broadly under a BSD general license. The
download includes all the examples provided here along with documentation
regarding how to use the tool. In addition the grammar file used to create
Eugene is available as well. It requires Java 6 () to run. We encourage questions and
comments. http://sourceforge.net/projects/notepad-plus/ http://sourceforge.net/projects/notepad-plus/ http://synbioss.sourceforge.net http://synbioss.sourceforge.net Eugene is most effectively used with other tools as illustrated in this paper.
Clotho is available at  .
It too is an open source project under BSD. We highly recommend
Notepad++ for the creation of Eugene files and we provide a
Notepad++ syntax highlighter with the Eugene download. You can get
Notepad++ at . SynBioSS is
available at  . Click here for additional data file. We thank the following people for making this work possible: the UC Berkeley 2009
computational iGEM team (Joanna Chen, Richard Mar, Thien Nguyen, and Nina Revko),
the UC Berkeley 2009 experimental iGEM team (Jenn Brophy, Susan Chen, Elicia Farrar,
Gabriela Guzman, Patrick Harrigan, Tom Huffaker, Terry Johnson, Joseph Silo, Matthew
Walters, John Wang and Lane Weaver), Josh Kittleson, Tim Hsiau, the SBOL Visual team
(Cesar Rodriguez, Suzie Bartram, Anusuya Ramasubramanian, Drew Endy), the JBEI
Registry Team (Nathan Hillson, Tim Ham, Zinovii Dmytriv), and the CIDAR Team (Traci
Haddock, Roza Ghamari in particular). In addition, the following people provided
valuable input during development of Eugene: Paul Hilfinger (consulted on initial
Eugene design), Jacob Beal and Ron Weiss..