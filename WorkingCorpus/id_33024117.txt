The forward engineering of cellular and molecular computing systems is driven by integrating elementary biological parts to produce high-level functions. The development of foundational components, such as molecular logic gates and genetic clocks, have enabled the design of biocircuits with increasing complexity, including the ability to solve mathematical problems, build autonomous robots, and play interactive games. To date, the majority of biocircuits are implemented in platforms that operate on the genetic circuit analogy, which require genome or protein engineering. These genetic circuits process biological signals (e.g., pH, temperature, chemical concentrations, etc.) by receiving information via promoters that induce gene expression, and output information by expressing reporters (e.g., GFP) or effector molecules (e.g., therapeutics). Traditionally, genetic circuits digitize these molecular signals as two-valued states (e.g., low vs. high concentration is represented as state 0 or 1, respectively) to allow operations to be carried out by Boolean logic (e.g., AND gates). By contrast, analog circuits are designed to represent variables using the entire range of continuous values (i.e., between 0 and 1) rather than two-valued integers (i.e., either 0 or 1). Analog circuits are better suited for processing problems with uncertainty by implementing so-called “fuzzy logic”, which assigns weights to each possible value that a variable can hold. Several molecular analog circuits have been implemented, including genetic circuits that carry out mathematical functions and DNA strand-displacement cascades to emulate neural networks. Enzyme activity has also been used in analog biocircuits by making use of promiscuity, which is an enzyme’s capacity to recognize and catalyze different substrates. Enzyme promiscuity bolsters evolutionary fitness and increases biological efficiency by using fewer enzymes to carry out the same number of reactions. Importantly, promiscuity creates a shared resource environment where enzymes and substrates are in competition for binding partners depending on resource scarcity. For instance, when strong promoters are used in synthetic gene circuits, transcriptional and translational machinery are diverted to express the synthetic circuit, creating competition for RNA polymerases and ribosomes. Consequently, the flow of biological information can be controlled by directing how resources are partitioned. This control strategy is fundamental to the design of biological systems that implement analog operations such as stochastic biocircuits, autonomous diagnostics, and synthetic ribosomes that insulate genetic circuits. Protease activity as digital or analog signals. (Left, top) A digital protease signal is exclusively two-valued (state 0 or state 1) (left, bottom) A digital protease signal in a state of either high or low protease activity, separated by an activity threshold (dotted line). (right, top) Analog signals are represented by a continuous value between two states (0 and 1) (dashed arrow). (right, bottom) An analog protease signal acting on two-state substrates has two cleavage velocities ( and ), which represent the fraction of the protease pool cleaving either substrate (state-0 or 1).  Experimental data of a digital, two-valued protease signal. Protease (C1r) activity assay against substrate (LQRIYK), at high and low activity, which is controlled by the protease concentration. Activity threshold is used to separate state-1 (high activity) from state-0 (low activity).  Protease (Plasmin) activity assay against substrate state-0 (GLQRALEI) and state-1 (KYLGRSYKV). Relative velocities represent the fraction of the protease pool cutting in either state.  is the fraction of plasmin cleaving substrate 0 and  is the fraction of plasmin cleaving substrate 1. Data are presented as mean values ± standard deviation. Line shading in both panels represents standard deviation ( = 3 biologically independent samples). RFU stands for “Relative Fluorescence Unit”, which represents the amount (i.e., moles) of cleaved substrate and is plotted as fold change (FC) from initial fluorescence at time = 0. Source data are provided as a Source data file. Building on these insights, we sought to construct biocircuits that use protease activity to process biological information under a digital or analog framework. We chose to use proteases because they are ubiquitous, comprise 2% of the human genome, and have previously been used in genetic circuits to implement and control information-processing computations. Under a digital framework, we construct peptide-caged liposomes that treat protease activity as two-valued operations depending on the level of activity (i.e., 0 or 1 for low or high protease activity respectively) (Fig.  left, ). We show a biological application by integrating these peptide-caged liposomes into an analog-to-digital converter for autonomous drug delivery. By contrast, we demonstrate in a shared resource environment that the activity of a promiscuous protease is partitioned when more than one peptide substrate is present (Fig.  right, ). We show that the fraction of substrates being cleaved can be quantified as a continuous analog signal (i.e., value ranges from 0 to 1) depending on the relative substrate concentration. We use these analog operations to design a biological circuit to solve the mathematical problem learning parity with noise (LPN). A biological analog to digital converter A biological ADC converts protease activity to a digital signal. Biocircuit diagram depicting the conversion of a biological input (protease activity) into a digital output with biocomparators, priority encoding, and OR gates. Circular arrow around gray protease represents enzyme activity.  Bare or  peptide-caged liposomes opened by lipase (orange) or GzmB (gray) activity, respectively, release TEV protease (red) that cleaves a quenched peptide substrate. In , liposomes (34 mM total lipid concentration) were loaded with TEV protease (1 μg protease/17 mmol lipids) and crosslinked with GzmB substrate peptide cage (peptide:liposome reaction ratio ~ 0.5 μmol/g). Fluorescent reporter is cleaved only in the presence of GzmB to degrade the peptide cage. Data is presented as mean (line) ± standard deviation (shading) from samples ( = 3 biologically independent samples) in , .  Protease orthogonality map measuring GzmB, WNV (blue), and TEV protease activity against respective substrates alone and in the presence of WNV protease inhibitor (blue triangle).  Increasing concentrations of GzmB across four orders of magnitude are input to the bioADC, and proteases p (WNV, blue) and p (TEV, red protease) are read out in a fluorescent assay using fluorescence-quenched substrates (RTKR and ENLYFQG). All data points are plotted as the slope of the best fit line to the cleavage velocities. Unpaired, one-way -tests ( = 4 biologically independent samples) were performed between the condition with GzmB and the negative control (no GzmB) for each respective output (i.e., p or p). Reported -values: from left to right starting with 0.02 µg/mL condition (blue bars): -values = 9.21e-7, 3.27e-6, 1.33e-5, 0.111, 0.086, 0.130, 5.20e-7, and 3.35e-6; (red bars) -values = 0.298, 0.326, 0.390, 1.150e-7, 5.870e-5, 0.000133, 1.690e-9, 7.040e-9. Biocomparator levels 0–3 are referenced by peptide cage reaction ratios, 0.0, 0.05, 5, and 5 × 10 μmol/g (peptide:liposome), respectively. Dashed line represents activity threshold that separates an output of 1 (velocity > 10 min) from an output of 0 (velocity < 10 min). Bars are reported as mean ± standard deviation (error bars).  Digital, two-valued output as a function of input GzmB concentration. RFU stands for “Relative Fluorescence Unit”, which represents the amount (i.e., moles) of cleaved substrate and is plotted as fold change (FC) from initial fluorescence at time = 0. Velocity is calculated as the difference in signal over time, or quantity of substrates cleaved per unit time (i.e., [time]). n.s. not significant, *<0.05, **<0.01, ***<0.001, and ****<0.0001. Source data are provided as a Source data File. A central function of complex circuits is the ability to store and manipulate digitized information; therefore, we first set out to construct a flash analog-to-digital converter (ADC) to convert biological signals into binary digits. An electronic ADC performs three major operations during signal conversion: voltage comparison, priority assignment, and digital encoding. An analog input voltage is first compared against a set of increasing reference voltages ( − ) by individual comparators ( − ) that allow current to pass if the input signal is greater than or equal to its reference value (Fig. ). During priority assignment, only the activated comparator with the highest reference voltage, , remains on while all other activated comparators,  −  are turned off. The prioritized signal is then fed into a digital encoder comprising OR gates to produce digital values. To design an ADC biocircuit using protease activity as the core signal, we constructed biological analogs of comparators by using liposomes locked by an outer peptide cage (Fig.  and Fig. ). With increasing peptide crosslinking densities, these biocomparators ( – ) served to reference the level of input protease activity (GzmB) required to fully degrade the peptide cage (IEFDSGK, Table ) and expose the lipid core (Fig. ), analogous to the reference voltages stored in electronic comparators. We used lipase as a Buffer gate to open all biocomparators with fully degraded cages (Fig.  and Fig. ) and release a unique combination of inhibitors and signal proteases (WNV, TEV, and WNV inhibitor) that collectively act to assign priority to the highest activated biocomparator () by inhibiting all signal proteases released from other biocomparators ( − ). To encode the prioritized signal into digital values, we designed a set of OR gates using orthogonal quenched substrates (RTKR and ENLYFQG) specific for the signal proteases (WNV and TEV, respectively, Fig. ) to provide fluorescent two-signal readouts (p − p; Fig. ). Fully integrated, our biological ADC converted input protease levels (GzmB) across four orders of magnitude into digital outputs (Fig.  and Fig. ). An integrated bioADC to execute an antimicrobial program An integrated bioADC to execute an antimicrobial program. Biocircuit depicting the use of an ADC to quantify bacteria and autonomously unlock digital drug doses. Circular arrow represents enzyme activity.  Cleavage assay measuring recombinant OmpT and live  culture cleavage of substrate (RRSRRV) Data is presented as mean (line) ± standard deviation (shading) ( = 3 biologically independent samples).  EC50 measurement for drug cytotoxicity and hemolysis against  and RBCs, respectively. Data is presented as mean ± standard deviation for cytotoxicity (blue) (for cytotoxicity  = 3 biologically independent samples, for hemolysis  = 2 biologically independent samples). Gray shading represents therapeutic window with 100% cytotoxicity and baseline hemolysis.  Viability of bacteria after treatment with locked drug and locked drug + protease ( = 4 biologically independent samples for treatment groups, gray, and red;  = 3 biologically independent samples for bacteria only, blue), one-way ANOVA and Dunnett’s multiple comparisons to bacteria only control; -values reported for comparison between no Tx (blue) and with Tx (gray) is -value =  0.4483, and between no Tx (blue) and with Tx + protease (red) is -value = <0.0001. Scale bar = 4 mm.  Drug bacteria cytotoxicity and RBC hemolysis at five concentrations of bacteria with four different versions of the antimicrobial program each containing a different number of biocomparators. Data is presented as mean ± standard deviation for cytotoxicity (blue) (for cytotoxicity  = 3 biologically independent samples, for hemolysis  = 2 biologically independent samples). The four biocomparators, b, b, b, and b, were cross-linked at peptide cage reaction ratios, 0.0, 3.4 × 10, 3.4, and 340 μmol/g (peptide:liposome), respectively. RFU stands for “Relative Fluorescence Unit”, which represents the amount (i.e., moles) of cleaved substrate and is plotted as fold change (FC) from initial fluorescence at time = 0. n.s. not significant, *<0.05, **<0.01, ***<0.001, and ****<0.0001. Source data are provided as a Source data file. To demonstrate a biological application, we next sought to interface our biological ADC with a living system for digital drug dosing. We rewired our ADC to autonomously quantify input bacterial activity and then output an anti-microbial drug dose to selectively clear red blood cells (RBCs) of bacteria (DH5α ) (Fig. ). To construct biocomparators with the ability to prioritize input levels of bacterial activity, we synthesized liposomes with peptide cages using a substrate (RRSRRVK) specific for the  surface protease OmpT (Fig. ). We synthesized a series of 8 biocomparators with increasing peptide densities (i.e., peptide:liposome reaction ratios spanning 0, 8.5 × 10, 8.5 × 10, 8.5 × 10, 8.5, 85, 170, 255, 340 μmol/g) and validated their ability to sense input bacterial concentrations across 8 log units (0–10 CFU/ml) using a fluorescent reporter (Fig. ). To convert the release of signal proteases to a drug output, we designed protease-activatable prodrugs comprising cationic (polyarginine) anti-microbial peptides (AMP) (Fig.  and Table ) in charge complexation with anionic peptide locks (polyglutamic acid) to block the activity of AMP. These drug-lock peptides were linked in tandem by OR gate peptides p and p (RTKR and ENLYFQG respectively) to allow signal proteases that directly cleave p or p to digitally control the output drug dose (Fig. ). We designed one-third and two-thirds of the total drug dose to be unlocked by cleavage of p and p, respectively, such that binary values 00, 01, 10, and 11 corresponded to 0/3, 1/3, 2/3, and 3/3 of the total drug dose (Fig. ). To confirm the therapeutic efficacy of our prodrug design, treatment of bacteria with locked drug had no significant cytolytic activity compared to untreated controls, but by contrast, treatment with protease-cleaved drug-lock complexes resulted in a significant reduction in bacterial colonies (Fig. ). We observed similar levels of bacterial cytotoxicity when AMP was directly loaded into liposomes, showing that charge complexation was required to fully block AMP activity (Fig. ). In human RBCs mixed with  at concentrations ranging from 10 to 10 CFU/mL, samples containing a single biocomparator () lacked the ability to eliminate bacteria as anticipated (output = 00). By contrast, increasing the number of biocomparators in the samples ( – ) allowed our program to autonomously increase the drug dose (output 01, 10, and 11) in response to higher bacterial loads to completely eliminate infection burdens across nine orders of magnitude up to 10 CFU/mL without increasing hemolysis (Fig.  and Fig. ). Our data showed that biocircuits can be constructed using protease activity as a digital signal to execute autonomous drug delivery programs under a broad range of conditions. Controlled partitioning of shared resources as analog operations 41467_2020_18840_Article_Equ1.gif Controlling substrate concentration to tune resource sharing – the uniform operation. One protease (blue pac man, Plasmin) cleaving one substrate (A, blue; 5FAM-KSVARTLLVK-(LysCPQ2)-C) represents a non-shared resource environment. The degree of substrate cleavage is quantified with cleavage velocity, , (change in rate of substrate cleavage). The amount (i.e., moles) of cleaved substrate and is plotted as fold change (FC) from initial fluorescence at time = 0.  One protease (blue pac man) cleaving two substrates (substrate-A = blue, substrate-B = red = DABCYL-GPAALKAG-EDANS-R) represents a shared resource environment, as each substrate is competing for the same pool of proteases. The degree of resource sharing is quantified by the fractional cleavage score, (), which estimates the fraction of cleavage events that resulted from substrate-X. This is calculated by normalizing the cleavage velocities for each substrate. c Implementation of the biological uniform operation on a two-state analog protease signal showing raw, kinetic fluorescence data over time (line graphs) used to calculate the fractional cleavage scores (bar graphs) A protease (Thrombin), first only exposed to the state-A substrate (5FAM-KTTGGRIYGG-(LysCPQ2)), is then exposed to the state-B substrate (i.e., U, DABCYL-GPLGL-(DAP)-ARG-EDANS), resulting in equal fractions of the protease pool occupying either substrate state (~45 and 55% respectively). A second U-operation (U), performed by adding state-A substrate in large molar excess, reversed the operation to restore the protease pool to its original state, which is that nearly the entire protease pool is cleaving substrate-A (~87%). For (–, data is presented as mean ± standard deviation ( = 3 biologically independent samples). Source data are provided as a Source data file. We next sought to demonstrate that proteases in a shared resources environment can be used to build analog biocircuits. We first considered one pool of proteases (plasmin) cleaving one target peptide (substrate-A, blue) as representative of a non-shared resources environment (Fig. ). This substrate (5FAM-KSVARTLLVK-(LysCPQ2)-C) contained a fluorophore-quencher pair (5FAM and LysCPQ2, respectively) to allow quantification of the substrate cleavage velocity, v, by monitoring increases in sample fluorescence over time. To construct a shared resource environment, we incubated plasmin with substrate-A and a second peptide, substrate-B (red), and observed that this caused total plasmin cleavage activity to be partitioned between substrate-A and substrate-B (Fig. ). To assess the degree of partitioning, we quantified the fractional cleavage score  (−), which reflects the average fraction of the protease pool cleavage events resulting from substrate-X. Fractional cleavage is analogous to fractional occupancy that is commonly used in models of receptor-ligand binding kinetics. Here rather than measuring the fraction of receptors bound to a particular ligand, we measure the fraction of protease cleavage events bound to a particular substrate by quantifying the normalized cleavage velocities (Eq. ). This fractional cleavage score quantifies the degree of resource sharing since when values of () approach 1, proteases are cleaving a single peptide (i.e., resource sharing is OFF). Conversely, when protease activity is uniformly partitioned between two substrates, the value of () approaches 0.5 (i.e., uniform resource sharing = ON). To construct an operation capable of turning resource sharing ON and OFF, we developed the uniform (U) operation. The U operation is a two-step procedure (i.e., denoted by U and U, respectively) that first takes as input a pool of proteases cleaving substrate-A in a non-shared resource setting (Fig.  i) and outputs a state where protease activity is partitioned uniformly between substrate-A and substrate-B (i.e., () = () = 50%). This was done experimentally by adding substrate-B such that the fractional cleavage scores were equivalent (Fig.  ii). The second half of this operation (U) functions to reverse, or turn resource sharing OFF. This was done by adding a large molar excess of substrate-A such that the fractional cleavage score for substrate-A would approach 100% (() = 87%,  = 3) (Fig.  iii). These results demonstrated that by controlling the available concentration of two substrates, resource sharing can be turned ON and OFF in a pool of proteases. Controlling substrate concentration to match two protease pools to the same state of shared resources—the linker operation. Schematic depicting the biological implementation of the L-operation. The state-B substrate (red) is added to two different protease signals (blue = control, red = target) at such a concentration that the output state-B substrate fractional cleavage (i.e., ()) approaches 100%.  Experimental example of the L-operation. The output states of control protease pool (MMP7, top row) and target protease pool (plasmin, bottom row) are matched by addition of the state-B substrate (DABCYL-GPAALKAG-EDANS-R) such that the output protease populations have a matched fractional cleavage close to 100% (97% and 98%). The amount (i.e., moles) of cleaved substrate and is plotted as fold change (FC) from initial fluorescence at time = 0. Data is presented as mean ± standard deviation ( = 3 biologically independent samples). Source data are provided as a Source data file. Next, we sought to build an operation with a 2-input/2-output format. Operations with multiple inputs and outputs are important because they enable the comparison or integration of different signals, such as a Half Adder circuit or 2-bit Synchronous counter. For our system, we designed an operation called the Linker operation that functions by matching the shared resources state for two input protease signals, named the reference and target signal, to a non-shared state. Here if the reference protease is in a state of shared resources, the Linker operation then matches (i.e., links) the fractional cleavage scores of the reference and target proteases to () = 100% (Fig. ). To demonstrate the L-operation experimentally, we started with a reference protease pool (i.e., MMP7) initially in a state of shared resources (i.e., () = () = 50%) and a target protease pool (i.e., plasmin) in a state of non-shared resources (i.e., () = 100%). Then, we applied the L-operation to match the output states of the reference protease pool (i.e., MMP7) and the target protease pool (i.e., plasmin) by adding the state-B substrate (DABCYL-GPAALKAG-EDANS-R). We observed that the output protease pools were both matched to a state of non-shared resources with fractional cleavage scores approaching 100% for substrate-B (i.e., reference () = 97%, target () = 98%) (Fig. ). These results demonstrated that by controlling the concentration of the state-B substrate, the degree of resource sharing can be matched between protease pools. Solving a mathematical problem with proteases and shared resources Proteases in shared resource environments represent joint-states in the oracle problem. Schematic of non-analog solution to oracle problem. The oracle problem is a general inference problem where an oracle (i.e., gray box) is hiding a string of digits (i.e., hidden string  = ). The goal is to infer the value of the hidden string. To accomplish this, the user can make oracle queries, which cause the oracle to (1) generate a random string (red text, ) and (2) take the dot product (i.e., scalar product of two vectors) of the hidden and random strings to produce the answer signal, .  Schematic showing conceptually how to solve the oracle with proteases. To set up the problem, (1) the user first initializes all variables to 0 (i.e.,  = [00 0],  = (000) = 100%). (2) Then, the user represents all hidden strings simultaneously (i.e.,  = (000) =  = (010) =  = (100) =  = (110) = 25%). (3) The user applies analog operations to learn which digit(s) in the hidden string is/are matched to the answer signal (i.e., positive selection). (4) The user validates that the remaining digit(s) in the hidden string is/are not matched to the answer signal (i.e., negative selection).  Schematic demonstrating how the weights for all eight joint-states are calculated using the fractional cleavage scores of individual protease pools. Here, uniform resource sharing is ON (i.e., cleaving substrates A and B equally, or () = () = 50%) for the two hidden string proteases (gray and blue proteases) and resource sharing is OFF (i.e., () = 100%) and () = 0%)) for the answer protease (red protease). The weights for all eight possible joint-states (i.e., (), (), …, ()) are calculated by multiplying the fractional cleavage scores for each of the three individual protease pools (e.g., () = 25%), and these weights will collectively add up to 100%. We designed the Uniform and Linker operations based on previously described analog operations that could be used to solve one type of oracle problem, the LPN. Here an oracle contains a hidden string, , of digits (Fig.  represents the case where the hidden string  = [01]) that is unknown to the user. To infer the value of the hidden string, the user can make "oracle queries" that cause the oracle to generate random strings, , and return the dot product (i.e., the scalar product of two vectors) between the hidden string and the random string (i.e., ·) as an answer signal, . Conventionally, the possible hidden strings (i.e., [00], [01], [10], [11]) and answer signals (i.e., [0] or [1]) are concatenated to form a 3-valued joint-state (i.e., [hidden string, answer signal] = ) that has eight possible permutations (i.e., [00 0], [00 1], …, [11 1]). By querying the oracle and eliminating hidden strings that could not have produced the observed answer signal, the user can infer the value of the hidden string. For example, if on query number-1 the oracle generates the random string x = [00], then the user will see the answer signal = 0 (i.e., · = [01]·[00] = 0), which does not provide any information about the hidden string , as it can take on any value. However, if on query number-2 the oracle generates the random string x = [01], then the user will observe that the answer signal = 1 (i.e., · = [01]·[01] = 1) and can determine that 1 is the second-digit (i.e.,  = 1) (Fig. ). By repeating oracle queries, the user will be able to eventually infer the value of the hidden string. However, each query yields at most one additional piece of information. By contrast, rather than querying the oracle in a stepwise manner, analog circuits are designed to test multiple possible joint-states simultaneously by assigning each a relative weight (e.g., (000), (001), …, (111)). This approach allows the user to learn one or more piece of information after each operation. For example, a non-biological algorithm of the oracle problem starts by initializing all values in the joint-state to 0 (i.e., () = (000) = 100%), and then simultaneously represents all possible hidden strings (i.e., (000) = (010) = (100) = (110) = 25%) (Fig. ; steps 1 and 2). Then, to solve the oracle, the user applies an analog operation to learn which digits in the hidden string are matched with the answer signal (i.e., positive selection) and then validates that the remaining digits in the hidden string are not matched with the answer signal (i.e., negative selection) (Fig. ; steps 3 and 4, respectively). For example, in the case where the hidden string is [01], the correct joint-state is [01 1]. Therefore, after positive selection, the remaining joint-states [01 1] and [11 1] are equally weighted (i.e., (011) = (111) = 50%). After negative selection, the user is able to determine that the correct joint-state with the highest weight is [01 1] (i.e., (011) = 100%). Based on this previously described analog algorithm, we next sought to show that proteases can be used to implement and solve the oracle problem. When a protease is in a shared resource environment with two substrates (i.e., blue and red; Fig. ), its fractional cleavage scores ()and () take on a value between 0% and 100%, which is analogous to relative weights. Therefore, if two proteases are designated to represent possible hidden string values (gray and blue) and one protease (red) to represent the answer signal, this system of three proteases can then represent all eight possible joint-states simultaneously. For example, in the setting where uniform resource sharing is ON for the two hidden string proteases (i.e., gray and blue protease each cleaving substrates A and B equally, or () = () = 50%) and resource sharing for the answer protease is OFF (i.e., red protease; () = 100% and () = 0%), then the weights for all eight possible joint-states (i.e., (), (), …, ()) can be individually calculated by multiplying the fractional cleavage scores of the three proteases (e.g.,., () = 25%) (Fig. ). These analog weights for the joint-states would always total to 100%, and its values would depend on the extent of resource sharing for each of the three proteases. Using shared resources to represent a mathematical solution to the oracle problem. (Top) Schematic representing the order in which the U, U, and L gates are applied to each of the three protease pools (pool-1 Gray = Thrombin, pool-2 Blue = MMP7 and pool-3 Red = Plasmin). Each line is specific to one protease, and the arrow indicates the order in which each gate was applied. (Bottom) Tables show the experimental data of the fractional cleavage values (i.e., () and ()) for each pool of proteases (gray, blue, red). Bar graphs represent the relative weights of each joint-state after each round of substrate operations (steps 1–4), which were calculated using the fractional cleavage data in the corresponding table below.  Experimental data (bar graphs) showing the remaining three implementations of the oracle problem (i.e., (), (), and ()). Schematics to the left of the bar graphs are the schematics representing the order in which the U, U, and L gates were applied for each problem. Bar graphs represent the relative weight for each of the eight possible output joint-states. Red bar indicates the correct joint-state with the highest weight. For , , data is presented as mean ± standard deviation ( = 3 biologically independent samples). Source data are provided as a Source data file. Legend to identify the proteases and substrates used in all four oracle problems. Non-bold, capital letters represent single-letter amino acid codes. Bold letters represent other functional groups:  = 4-(dimethylaminoazo)benzene-4-carboxylic acid; EDANS = (5-((2-Aminoethyl)amino)naphthalene-1-sulfonic acid);  = lysine-conjugated quencher ( Scientific);  = 2-3, diaminopropionic acid. Based on the non-biological implementation of the oracle problem, we designed analog biocircuits using a combination of Uniform (i.e., U and U) and Linker operations to solve the oracle for the particular joint-state () (Fig. ). All proteases were initialized to cleaving substrate-A (i.e., joint-state () = 100%)). Then to represent all hidden strings simultaneously (i.e., answer signal,  = ; () = () = () = () = 25%)), we applied U Uniform operations to protease pools 1 and 2 to create a state of shared resources within each pool (Fig. ; steps 1 and 2). Then, we applied L-operation(s) to reveal which protease pools in the hidden string were matched with the answer signal (i.e., positive selection) by outputting matched proteases to the same state of shared resources (i.e., pool-2 () = 100%, pool-3 () = 100%) (Fig. ; step 3). Lastly, we validated that the remaining protease pool (i.e., pool-1) was not matched with the answer signal (i.e., negative selection) by applying three U Uniform operations, which reversed pool-1 to a state of non-shared resources cleaving substrate-A (i.e., pool-1 () = 100%) (Fig. ; step 4). Experimentally, we found that this protease-based, shared resources solution yielded the correct joint-state with the highest weight (() = 80%,  = 3) when compared to the seven other possible joint-states (each other answer <12%,  = 3) (Fig. ). To further support these results, we solved the remaining three implementations of the oracle problem (proteases and substrates in Table ), which were (), (), and (). In each of these three configurations, the protease-based solution outputted the correct joint-state with the highest weight (Fig. ). By interpreting protease activity as carrying digital or analog information, we demonstrated the use of proteases in molecular biocircuits. We used two-valued protease operations carried out by Boolean logic gates to construct an ADC as an autonomous drug delivery biocircuit to clear blood of bacteria across nine orders magnitude in concentration. To construct our biological ADC, we designed biocomparators using peptide-caged liposomes because these materials are well-tolerated and biologically compatible. Our molecular approach is distinct from existing synthetic protein and genetic circuit methods that require protein or organismal engineering to control signaling, including the non-trivial OFF state for proteases which has required insertion strategies artificial autoinhibitors, or dimerizing leucine zippers to control. Parallel to our use of liposome-based particles to control protease activity, liposomes have also been used in past studies such as synthetic minimal cells to control the expression of genetic circuits by liposome fusion. Our approach may be amenable to integration with these genetic approaches, if for example, these circuits were redesigned to input or output (i.e., express) proteases. In addition to manipulating exclusively two-valued protease operations, we demonstrated the use of proteases in a shared resources environment to represent analog operations. Analog biocircuits have been demonstrated in systems including gene circuits, DNA strand displacement cascades, and restriction enzymes. Many of these circuits primarily process continuous signals via summing, thresholding, and binning using comparators or linear threshold circuits (i.e., multi-input comparator). A few studies have used analog biocircuits to represent and operate on multiple states simultaneously by assigning a weight to each state (i.e., fuzzy logic). As an example, a pool of restriction enzymes, , was partitioned between different DNA substrates to represent two output states with a weight (i.e., 0 → 100%) calculated by the relative abundance of each DNA product (i.e., 16 versus 17 nt-long product bands). By comparison, we used promiscuous proteases to create a shared resources environment where one protease is partitioned between cleaving two peptide substrates. In the context of the oracle problem, we used three pools of proteases in a state of shared resources to represent eight output states simultaneously. The strategy of representing multiple states simultaneously enables problems that typically require an iterative approach (i.e., each possible answer is tested sequentially) to be solved more efficiently, which has been demonstrated using strand displacement cascades to solve combinatorial math problems. Looking forward, this strategy may have advantages for implementing biological problems that require a type of iterative approach, such as the decryption of gene circuits. All protease cleavage assays were performed with a BioTek Cytation 5 Imaging Plate Reader, taking fluorescent measurements at 485/528 nm and 540/575 nm (excitation/emission) for read-outs measuring peptide substrates terminated with FITC (Fluorescein isothiocyanate) and 5-TAMRA (5-Carboxytetramethylrhodamine), respectively. Kinetic measurements were taken every minute over the course of 60–120 min at 37 C. West Nile Virus NS3 protease (WNVp) and Tobacco Etch Virus protease (TEVp), along with their substrates, inhibitors and buffers were obtained from Anaspec, Inc. (Fremont, CA). Phospholipase C (PLC), Phosphatidylinositol-Specific (from Bacillus cereus) was purchased from Thermo Fisher Scientific (Waltham, MA). Activity RFU measurements were normalized to time 0 measurement, and as such later time points (after time-0) represent fold change in signal. Granzyme B (GzmB) was purchased from PeproTech, Inc. (Rocky Hill, NJ). Thrombin and Factor XIa were purchased from Haematologic Technologies (Essex, VT). Outer Membrane Protease T (OmpT, Protease 7) was purchased from Lifespan Biosciences (Seattle, WA). C1r was purchased from Millipore Sigma (Burlington, MA). GzmB, Thrombin, Factor XIa, and C1r fluorescent peptide substrates were custom ordered from CPC Scientific (Sunnyvale, CA). OmpT fluorescent peptide substrate was custom ordered from Genscript (Piscataway, NJ). See Tables  and  for more information regarding proteases, substrates, peptides, and inhibitors. In all, 10 μL of liposomes (34 mM lipids) loaded with TEVp (1 μg protease/17 mmol liposome) were coincubated with 50 μL TEVp substrate in provided activity buffer (pH 7.5). In all, 2 μL of PLC (100 U/mL) was added to the experimental group, and 2 μL of assay buffer was added to the control group (Fig. b). In all, 10 μL of liposomes (34 mM lipids) loaded with TEVp (1 μg protease/17 mmol liposome), embedded with 10 mol% CPAA and crosslinked at 0.1% efficiency with GzmB substrate were coincubated with 50 μL TEVp substrate in provided activity buffer (pH 7.5). In all, 2 μL PLC (100 U/mL) was added to both the control and experimental group. In all, 2 μL GzmB (0.1 μg/uL) was added only to experimental group (Fig. c). All amounts of protease, substrate, and inhibitor for WNVp and TEVp were added according to instructions from Anaspec WNVp and TEVp activity kit. All conditions incubated with WNVp inhibitor include protease of interest incubated with its primary substrate. GzmB was added at a working concentration of (0.01 mg/mL) to 2 μM of its peptide substrate (Fig. d). All four biocomparator levels ( – , 50 mM lipids each) were added together (10 μL each), and co-incubated with 13 μL of GzmB solution (concentration varies depending on condition), 2 μL of PLC (100 U/mL), 0.5 μL of WNVp substrate (after diluted 100x according to manufacturer’s instructions), 0.5 μL of TEVp substrate (after diluted 100x according to manufacturer’s instructions), and 4 μL of assay buffer. Biocomparator levels 0–3 are referenced by peptide cage crosslinking efficiencies of 0%, 0.01%, 1%, and 100%, respectively. Plotted values are taken at minute 30 and normalized to starting values (time 0, or equivalently, the no protease control). Unpaired, one-way -tests ( = 4) were performed between the condition with GzmB and the negative control (no GzmB) for each respective output (i.e., p or p) (Fig. e). For recombinant OmpT condition, 2 μL of OmpT (0.5 mg/mL) was added to 18 μL of 2 μM OmpT substrate. For  condition, 2 μL of  (10 CFU/mL) was added to 18 μL of 2 μM OmpT substrate. In all, 2 μL of DI HO was added to the negative control, along with 18 μL of OmpT substrate (Fig. b). For Fig. , the protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.24 μM) in PBS. For Fig.  b, the protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.24 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 0.2 μM) simultaneously in PBS. Experiments were read on Plate Reader at 37 C with plate sealer and plastic plate cover (Fig. a, b). For Fig. c panel i, the protease Thrombin (250 nM) was incubated with substrate-A (5FAM-KTTGGRIYGG-(LysCPQ2)-C; concentration = 0.64 μM) in PBS. For panel ii, the protease Thrombin (250 nM) was incubated with substrate-A (5FAM-KTTGGRIYGG-(LysCPQ2)-C; concentration = 0.64 μM) as well as substrate-B (DABCYL-GPLGL-(DAP)-ARG-EDANS-R; concentration = 6.75 μM) simultaneously in PBS. For panel iii, the protease Thrombin (250 nM) was incubated with substrate-A (5FAM-KTTGGRIYGG-(LysCPQ2)-C; concentration = 1.28 μM) as well as substrate-B (DABCYL-GPLGL-(DAP)-ARG-EDANS-R; concentration = 6.75 μM) simultaneously in PBS. Experiments were read on Plate Reader at 37 C with plate sealer and plastic plate cover (Fig. c). For Fig. b panel i, the protease MMP7 (250 nM) was incubated with substrate-A (5FAM-KYLGRSYKV-(LysCPQ2)-C; concentration = 2.53 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM) simultaneously in PBS. The protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.24 μM) in PBS. For panel II, the protease MMP7 (250 nM) was incubated with substrate-A (5FAM-KYLGRSYKV-(LysCPQ2)-C; concentration = 2.53 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 149.50 μM) simultaneously in PBS. The protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.24 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 74.75 μM) simultaneously in PBS (Fig. b). For Fig. , Oracle (), graph (1), the protease Thrombin (250 nM) was incubated with substrate-A (5FAM-KTTGGRIYGG-(LysCPQ2)-C; concentration = 0.64 μM) in PBS. The protease MMP7 (250 nM) was incubated with substrate-A (5FAM-KYLGRSYKV-(LysCPQ2)-C; concentration = 2.53 μM) in PBS. The protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.24 μM) in PBSg (Fig. a, b). For Fig. , Oracle (AB B), graph (2), the protease Thrombin (250 nM) was incubated with substrate-A (5FAM-KTTGGRIYGG-(LysCPQ2)-C; concentration = 0.64 μM) as well as substrate-B (DABCYL-GPLGL-(DAP)-ARG-EDANS-R; concentration = 6.75 μM) simultaneously in PBS. The protease MMP7 (250 nM) was incubated with substrate-A (5FAM-KYLGRSYKV-(LysCPQ2)-C; concentration = 2.53 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM) simultaneously in PBS. The protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.24 μM) in PBS. For Fig. , Oracle (AB B), graph (3), the protease Thrombin (250 nM) was incubated with substrate-A (5FAM-KTTGGRIYGG-(LysCPQ2)-C; concentration = 0.64 μM) as well as substrate-B (DABCYL-GPLGL-(DAP)-ARG-EDANS-R; concentration = 6.75 μM), plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM), simultaneously in PBS. The protease MMP7 (250 nM) was incubated with substrate-A (5FAM-KYLGRSYKV-(LysCPQ2)-C; concentration = 2.53 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM) plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 119.60 μM), simultaneously in PBS. The protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.24 μM) plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 74.75 μM), in PBS. For Fig. , Oracle (AB B), graph (4), the protease Thrombin (250 nM) was incubated with substrate-A (5FAM-KTTGGRIYGG-(LysCPQ2)-C; concentration = 1.28 μM) as well as substrate-B (DABCYL-GPLGL-(DAP)-ARG-EDANS-R; concentration = 6.75 μM), plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM), simultaneously in PBS. The protease MMP7 (250 nM) was incubated with substrate-A (5FAM-KYLGRSYKV-(LysCPQ2)-C; concentration = 5.07 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM) plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 119.60 μM), simultaneously in PBS. The protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.48 μM) plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 74.75 μM), in PBS. For Fig. , Oracle (AA B) (i.e., graph 4), the protease Thrombin (250 nM) was incubated with substrate-A (5FAM-KTTGGRIYGG-(LysCPQ2)-C; concentration = 1.28 μM) as well as substrate-B (DABCYL-GPLGL-(DAP)-ARG-EDANS-R; concentration = 6.75 μM), plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM), simultaneously in PBS. The protease Complement protease C1s (250 nM) was incubated with substrate-A (5FAM- KYLGRSYKV -(LysCPQ2)-C; concentration = 0.24 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM) plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM), simultaneously in PBS. The protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.48 μM) plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 74.75 μM), in PBS. For Fig. , Oracle () (i.e., graph 4), the protease MMP7 (250 nM) was incubated with substrate-A (5FAM-KYLGRSYKV-(LysCPQ2)-C; concentration = 5.07 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM) plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 119.60 μM), simultaneously in PBS. The protease Thrombin (250 nM) was incubated with substrate-A (5FAM-KTTGGRIYGG-(LysCPQ2)-C; concentration = 1.28 μM) as well as substrate-B (DABCYL-GPLGL-(DAP)-ARG-EDANS-R; concentration = 6.75 μM), plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM), simultaneously in PBS. The protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.48 μM) plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 74.75 μM), in PBS. For Fig. , Oracle () (i.e., graph 4), the protease MMP7 (250 nM) was incubated with substrate-A (5FAM-KYLGRSYKV-(LysCPQ2)-C; concentration = 5.07 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM) plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 119.60 μM), simultaneously in PBS. The protease Cathepsin G (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.05 μM) as well as substrate-B (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM), plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 29.90 μM), simultaneously in PBS. The protease Plasmin (250 nM) was incubated with substrate-A (5FAM-KSVARTLLVK-(LysCPQ2)-C; concentration = 0.48 μM) plus an additional substrate-B for the Linker operation (DABCYL-GPAALKAG-EDANS-R; concentration = 74.75 μM), in PBS. Liposome synthesis and characterization Liposome synthesis kit, PIPES buffer, EDC*MeI, and spin filters (100 kDa m.w.c.o. filters) were purchased from Millipore Sigma (Burlington, MA). Cholesterol-anchored Polyacrylic Acid (4400 g/mol, 30–40 COOH groups/molecule, structure in Fig. ) was custom ordered from Nanocs (Boston, MA). Float-a-lyzer dialysis tubes (100 kDa m.w.c.o., 1 mL) were purchased from Spectrum Labs (Rancho Dominguez, CA). Synthesis protocol is adapted from the methods used by Basel et. al. Liposomes were loaded with respective protease inhibitor cocktail amounts, and concentration was estimated via absorbance. Standard curve for estimating concentration of liposomes was used by correlating absorbance of liposome solution at 230 nm with known standard concentrations. CPAA was vortexed in warm water (<10 mg/mL) and volume was added such that there was 10 mol% CPAA relative to the molarity of lipids in the liposome solution. Solution was incubated for 1 h at room temperature, or overnight at 4 C. Excess polymer and materials were removed via centrifugation (spin filters, 3–5 times at 4700 ×  for 10 min) or float-a-lyzer membranes (4 °C in spinning water overnight). EDC*MeI was dissolved into 10 mM PIPES buffer and volume was added such that EDC*MeI:CPAA ratio was 4:1. Solution was incubated for 20 min at room temperature. Excess EDC was filtered out via centrifugation or dialysis tubes. Peptide crosslinker was added at desired molar ratio and incubated for 1 hour at room temperature or overnight at 4 C. Excess peptide was filtered via centrifugation or dialysis tubes. Change in liposome hydrodynamic diameter was measured via DLS on a Zetasizer Nano ZS, Malvern Panalytical (Netherlands). Volumes loaded into biocomparators include concentrations of proteases and inhibitors as follows:  = empty;  = 20 μL WNVp (0.1 mg/mL) + 80 μL DI HO;  = 50 μL WNV inhibitor (1 μM) + 50 μL TEVp (0.04 mg/mL);  = 50 μL WNVp (0.1 mg/mL) + 50 μL TEVp (0.08 mg/mL). Bacterial cytotoxicity and human red blood cell hemolysis assays Bacterial culture and cytotoxicity measurement. DH5α  were a gift from Todd Sulchek’s BioMEMS lab at Georgia Tech.  were cultured in LB broth (Lennox) at 37 °C and plated on LB agar (Lennox) plates. LB broth was purchased from Millipore Sigma (Burlington, MA) and LB agar was purchased from Invitrogen (Carlsbad, CA). AMP and locked AMP were custom ordered from Genscript (Piscataway, NJ). See Table  for more information. Bacteria were grown to a concentration of 10 CFU/mL before being used for experiments. Concentration was estimated by measuring the OD of the bacterial suspension, where an OD of 1.000 corresponds to a concentration of 8 × 10 CFU/mL. Bacterial cell viability was measured by making eight 10-fold serial dilutions, and plating three 10 μL spots on an LB agar plate. Plates were incubated overnight at 37 °C, and CFUs were counted. Untreated bacteria CFU counts served as control for 0% cytotoxicity, and bacteria + IPA (or 0 countable CFUs) served as control for 100% cytotoxicity. RBC collection and hemolysis measurement. Healthy blood donors had abstained from aspirin in the last two weeks, and written informed consent was obtained according to GT IRB H15258. Blood was drawn by median cubital venipuncture into sodium citrate (3.2%). The sample was subsequently centrifuged at 150 ×  for 15 min, and the resulting platelet rich plasma was discarded. Red blood cells were then washed three times with phosphate buffered saline (PBS). For each wash, 12 mL of PBS were added, the sample was centrifuged at 200 ×  for 10 min, and the supernatant was discarded. Hemolysis was estimated by spinning down experimental RBC samples and measuring the absorbance of the supernatant at 450 nm. Absorbance values corresponding to 100% hemolysis came from incubating RBCs with 0.1% Tween-20. Absorbances corresponding to 0% hemolysis came from untreated RBCs. For bacterial cytotoxicity measurements, 25 μL of antimicrobial peptide (AMP) was added, pertaining to 7 concentrations ranging between 7.6 nM and 7.6 mM. In all, 20 μL of bacteria (10 CFU/mL) were added, and the sample was filled to 200 μL with LB broth in PCR tubes. Sample tubes were taped on a plate shaker (250 RPM) incubating at 37 C for 8 h. For RBC hemolysis measurements, the same assay was performed, but used 20 μL of donor RBCs instead of bacteria solution (Fig. c). For bacteria only condition, 5 μL of bacteria (10 CFU/mL) were added to 95 μL LB broth. For bacteria + AMP p, 58 μL of AMP p (1.7 mM) were added to 5 μL of bacteria (10 CFU/mL), with the solution being filled to 100 μL with LB broth. For bacteria + protease + locked AMP p, 20 μL of TEVp (4 μg/mL) and 58 μL of AMP p (1.7 mM) were added to 5 μL of bacteria (10 CFU/mL), with the solution being filled to 100 μL with LB broth. Samples in PCR tubes were taped to a plate shaker (250 RPM) incubating at 37 C for 1 h. Serial dilutions and plating were then performed to measure viable bacteria concentrations (Fig. d). Each condition includes 20 μL of the bioprogram (2 μL of PLC, 6 μL D, 6 μL D, 6 μL D), 20 μL of bacteria, 10 μL of RBCs, 24 μL of locked peptide drug (9 μL of 1.7 mM AMP p and 15 μL of 0.53 mM AMP p), and 126 μL PBS. The concentration of bacteria, and the presence of each biocomparator, depends on the experimental condition (Fig. ). Samples in PCR tubes were taped to a plate shaker (250 RPM) incubating at 37 C for 8 h, followed by dilutions/plating to estimate bacterial cytotoxicity. The remainder of the sample was spun down by centrifugation and used to estimate hemolysis (Fig. e). Statistical analysis was performed using statistical packages included in GraphPad Prism 6. To assess the significance of increase in signal due to protease cleavage, we used a two-way ANOVA (without repeated measures) followed by Sidak’s multiple comparisons test. To assess the accuracy of assigning the binary value 0 or 1 to the digits p and p as seen in Fig. , one-way unpaired t-tests were performed between the condition with GzmB and the negative control (no GzmB) for each respective output (i.e., p or p) (Fig. ). A one-way ANOVA followed by Dunnett’s multiple comparisons test was used to compare experimental means to cells only control in Fig. . Experiments in Figs. , , , , and , were reproduced three times total with similar results. Experiments in Figs. , , and  were reproduced two times total with similar results. Experiments in Figs.  and  were performed once. Nature Research Reporting Summary Further information on research design is available in the  linked to this article. 41467_2020_18840_MOESM1_ESM.pdf 41467_2020_18840_MOESM2_ESM.pdf.