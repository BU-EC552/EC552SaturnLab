The current challenge facing the synthetic biology community is the construction of relatively simple, robust and reliable genetic networks, which will mount a pool of modules, potentially to be connected into more complex systems. Rapid progress of experimental synthetic biology has indeed provided several synthetic genetic networks with different functionality. Since the development of two fundamental simple networks, representing the toggle switch  and the repressilator  in 2000, a vast number of proof-of-principle synthetic networks have been designed and engineered. Among them transcriptional or metabolic oscillators [–], spatially coupled and synchronised oscillators [, ], calculators , inducers of pattern formation , learning systems , optogenetic devices , memory circuits and logic gates [–]. One of the much awaited kinds of synthetic gene circuits with principally new functionality would work as intelligent biosensors, for example, realized as genetic classifiers able to assign inputs with different classes of outputs. Importantly, they would need to allow an arbitrary shape of the area in the space of inputs, in contrast to simple threshold devices. Recently, the first step in this direction has been made in , where the concept of a distributed genetic classifier formed by a heterogeneous population of genetically engineered cells has been proposed. Each cell in the distributed classifier is essentially an individual binary classifier with specific parameters, which are randomly varied among the cells in the population. The inputs to the classifier are certain chemical concentrations, which the engineered cells can be made sensitive to. The classification output from an individual cell can be provided, for example, by the fluorescent protein technique which is well developed and universally adopted in synthetic biology. The output of the whole distributed classifier is the sum of the individual classifier outputs, and the overall decision is made by comparing this output to a preset threshold value. If the initial (or “master”) population contains a sufficiently diverse variety of cells with different parameters, the whole ensemble can be trained by examples to solve a specific classification problem just by eliminating the cells which answer incorrectly to the examples from the training sequence. Note that strictly speaking, the selection procedure does not realize any kind of learning at the level of individual classifier (cell). On the other hand, we view the whole ensemble as a distributed classifier, and reshaping population can be regarded as tuning its parameters. Since reshaping occurs in response to a sequence of training examples, we refer to this procedure as learning. The paper  focused on distributed classifiers composed of single-input elementary classifiers. The single-input genetic circuit proposed in  provides a bell-shaped output function against the input chemical concentration. The individual cells in the population differ from each other by the choice of the particular input chemicals that they are sensitive to, and by the width and positioning of the bell-shaped response function. These parameters can be varied in a range of up to 10 by modifying the ribosome binding sites in the gene circuit [, ]. Such libraries of cells with randomized individual parameters have been constructed in experiments for synthetic circuit optimization [–]. The single-input distributed classifier has been numerically tested on several examples in . However, practical applications may require classification of multiple inputs. In  it has been discussed that the same principles can be utilized for a design of two- or multi-input circuits. The proposed circuit is based upon a genetic AND gate [–], providing a bell-shaped response function in the space of two or more inputs. Nevertheless, no studies of a distributed classifier with two or more inputs have been performed so far. In this paper we fill this gap by developing distributed classifiers based upon two types of elementary two-input classifier cells: one is a simple scheme implementing a linear classifier in the space of two inputs and the other is the scheme with AND gate and bell-shaped response proposed in . Below we consider two settings of the classification problem. In the first setting, which we refer to as “hard classification”, the classes are assumed separable, which implies that the sets of points in the parameter space belonging to either class do not intersect. In this case all elementary classifiers can be unambiguously separated into those answering correctly and incorrectly to the training examples, and the “hard learning strategy”, which is based upon discarding all incorrectly answering cells, may be used. We start with considering the case of separable classes and hard learning, using linear classifiers as elementary cells. We show that using this strategy a range of separable classification problems can be reliably solved even with a small number of elementary classifiers, including problems which become inseparable (and, thus, imposing a lower bound on the error rate) when attempted to be solved by single-input classifiers. At the same time, this approach is incapable of solving classification problems with more complicated classification borders, as well as problems with inseparable classes. In the second part we address both mentioned issues by means of soft learning strategy and elementary cells with bell-shaped response. We demonstrate the effectiveness of this approach for solving these more complicated tasks at the expense of a more complicated gene circuit in each elementary classifier and a greater number of cells required. Two-input linear classifier circuit We assume that the classifier input is a set of chemical concentrations capable of regulating appropriate synthetic promoters (directly or mediated by the regulatory network of the cell). In the simplest design of a multi-input genetic classifier circuit, the input genes drive the synthesis of the same intermediate transcription factor  (), but are regulated by different promoters sensitive to the corresponding input chemicals 
. The expression of the reporter protein, for example, green fluorescent protein (GFP), is driven by the total concentration of , summarized from all input genes. The stationary concentration  of the intermediate transcription factor can be expressed as a weighted sum over all classifier inputs

where 
 are concentrations of the inputs 
, 
(⋅) are nonlinear functions, each describing the response to a particular input, including the whole appropriate signalling pathway, and 
 are linear multipliers determining the relative strengths of the corresponding inputs, which can be varied in a range of more than 10-fold by varying the DNA sequence within and near the ribosome binding site of the corresponding input gene [, ]. For a sharper discrimination between the classifier decisions, we propose to make use of the protein sequestration technique  to generate an ultrasensitive response to  when its concentration exceeds a certain threshold. This is achieved by binding , which normally induces the reporter gene, with a suitable inhibitor into an inactive complex which can not bind DNA. The simplest description of this binding assumes that free active transcription factor  becomes available only when all inhibitor molecules are bound. Then the reporter protein concentration  may be approximated by a shifted and truncated Hill function 

where  is the threshold determined by the constitutive expression rate of the inhibitor , 
 is the DNA-binding dissociation constant for ,  determines the maximal output, and  is the basal expression of the reporter protein in the absence of . Response function of type  was derived and experimentally tested in  using a dimeric transcription factor CEBP along with a specially designed inhibitor, both from the basic leucine zipper protein family. The applicability of  is conditioned by a specific hierarchy of dissociation constants and typical concentrations of proteins . Namely, (i) sequestration being the dominant reaction (dissociation constant significantly smaller than all other relevant dissociation constants and concentrations), so that no free transcription factor is available unless all amount of inhibitor is bound; (ii) dimerization of inhibitor being negligible (dissociation constant significantly greater than all other relevant scales); (iii) dimerization of CEBP being at an intermediate level of affinity (dissociation constant significantly less than typical concentrations of CEBP and inhibitor, all of them at the same time falling in the range set forth by requirements (i) and (ii) above), so that almost all above-threshold amount of CEBP comes in dimerized (active) form. Note, that cooperative activation by dimeric CEBP was deliberately suppressed in  by using a promoter with a single binding site. That said, under the above listed conditions the output  is expected to retain its form (not exhibiting a Hill index greater than one) even when using a two-site promoter which binds CEBP dimer in a cooperative way, see Supplementary Information in . In other conditions a Hill index greater than one may have to be introduced in , in this case the ultrasensitive response sharpens even further. A master population of cells with randomized individual response characteristics can be obtained by randomly varying the input weights 
, as well as the threshold , among the cells in the population. In the following we restrict ourselves to the case of two inputs, but our approach equally applies to input vectors of any dimension. We assume that the parameter values in the th individual cell are  and  for the input weights and 
 for the threshold, the lower index denoting the input and the upper one labeling the cells, all other parameters being the same in both input channels in all cells. The GFP output of a chosen th individual classifier cell is then

with (;) defined in . We use the discrete-output model of the individual cell to analyze the learning process and the distributed classifier behaviour. Namely, we assume that each individual cell can produce two distinguishable kinds of output, corresponding to the cases in : low, or “negative answer” (which is the subthreshold background output 
 = ), and high, or “positive answer” (above-threshold output). We note that each individual cell acts as a linear classifier in the transformed input space with coordinates (
,
) defined by the corresponding nonlinear input functions

Indeed, an individual th cell generates high output when , or

where . Such classifier divides the transformed input space into two regions, corresponding to either answer of the classifier, which we will refer to as the negative and the positive classes. The border separating the classes in the transformed input space is a straight line

Note that 
 as well as 
 can not be negative due to their meaning. In the following, 
 and 
 are assumed to be non-negative real numbers. In particular, it means that the space of inputs and the space of parameters are always limited to the first quadrant (or hyperoctant with all coordinates non-negative) of the full real space, regardless of its dimension. 10.1371/journal.pone.0125144.g001 Scheme of a two-input linear classifier circuit. , 
—inputs inducing the corresponding promoters, RBS and RBS—ribosome binding sites determining the strengths of the input branches, A—intermediate transcription factor (same in both input branches), GFP—reporter gene. Hard classification technique and learning strategy An ensemble of linear classifiers can be utilized to perform a more complicated classification task with a piecewise-linear border in the transformed input space. Denote with 
 the positive class of the th individual classifier:

Let all elements in the ensemble be given the same input. Then the whole ensemble can be used as a single distributed classifier, dividing the transformed input space into the positive class  = ⋃

, where at least one individual classifier gives the positive answer, and the negative class , where all classifiers answer negatively (here the overbar “” denotes complement in the transformed input space), see . By construction, the negative class  is entirely contained in each closed half-plane defined by any of its edges, which means it is always convex. The classification border is a polygonal line composed of segments, each described by an equation of type , all having negative slope, because both  and  are positive. In the limit of large number of cells, the negative class becomes a convex region bordered by the coordinate axes and a smooth classification border having negative tangent slope at each point. An ensemble constituting a distributed classifier with a specified (“target”) classification border (satisfying the requirements of negative slopes and convexity) can be prepared by the following learning algorithm. Let us start with a master population of linear classifiers of type  with random parameters ,  distributed continuously over some interval. The aim of the learning is to keep all individual classifiers which answer correctly to  training examples and remove all incorrectly answering ones. To achieve this, we test the whole ensemble against a training sequence of samples from the negative class. All elements which answer positively to at least one negative sample are considered “incorrect” and are removed from the ensemble. This can be done, for example, using the fluorescence-activated cell sorting (FACS) technique. Positive class samples are not needed for learning, since hard classification fundamentally assumes separability of classes. Actually, it is enough to use only samples located along the classification border. Although training sequences of this kind might be not available in real situations, theoretically, excluding the interior of the negative region from the training sequence leads to achieving the same learning outcome with a smaller number of samples. The ensemble which remains after this learning procedure forms a distributed classifier with the class border determined by the training sequence. The actual set of cells constituting the trained distributed classifier is essentially the outcome of clipping the master population in the parameter space (
,
) with a certain mask, which completely characterizes the action of the learning algorithm. In other words, the trained ensemble is a set intersection of the master population with a region in the parameter space, which we will refer to as the “trained ensemble region”. To get an insight into a quantitative description of hard learning strategy, we start with a trivial case when the target classification border is linear, defined by the equation

where 
 are given constant coefficients, see . Although this classification task can be solved by a single linear classifier, we use it as a starting point to describe the training of a distributed classifier. In the course of learning with a sequence of points distributed along the border , any element having 
 > 
 or 
 > 
 will eventually answer positively and therefore will be removed from the ensemble. Thus, the trained ensemble region on the plane (
,
) is a rectangle (hatched area in ). Similarly, if the target border is a polygonal line (satisfying the requirements of negative slopes and convexity), with the target positive class being a union of several linear classes

where ,  are the coefficients of the individual segments of the target polygonal border, then the trained ensemble region on the plane (
,
) is a convex polygon with vertices , shown in Fig. S2A in  as hatched area. In  we analyze the response of a trained hard classifier to an input taken from the positive class. In particular, a lower estimate is obtained for the quantity of cells answering positively to such inputs. It is found to be proportional to the density of the master population per unit of the logarithmic parameter space (log
, log
). It is also shown that the maximal quantity 
, to which the region covered by the master population in the parameter space extends in both 
 and 
, should be not less than the inverse of the smaller intercept of the target class border (the intercepts are the abscissa and the ordinate of the points where the border crosses the axes 
 and 
). 10.1371/journal.pone.0125144.g002 , 
, 
—positive classes of individual linear classifiers, —negative class of the collective classifier. 10.1371/journal.pone.0125144.g003 Training a distributed classifier with a linear target border. (A) Target classes: —positive, —negative. (B) Trained ensemble region on the plane of parameters: hatched area. To illustrate and verify the analytical results, we performed numerical simulations. We specify the class border (black-white dashed line in ) composed of two sections. One section is a segment of the line 
+
 = , and the other one is an arc of the circle . The segments are connected at the point 
 = 
 = /2, forming a smooth curve. The negative class is the bounded part of the first quadrant of the plane (
,
), separated by the border. The training sequence of length 
 (white filled circles in ) is randomly sampled from the negative class. The positive class is additionally bounded by condition  with  > . The master population of the classifier cells is obtained by randomly sampling the parameters (
,
) from the log-uniform distribution in the parameter space, bounded by the minimal and maximal values 
 and 
. The total number of cells in the master population is 
. The uniform density of cells per logarithmic unit of the parameter space is The classifier is trained by presenting sequentially all training samples from the negative class, and discarding all cells answering positively to at least one sample. Algorithm description in  formalizes the above procedure. In our simulation we let 
 = 300, 
 = 200,  = 6,  = 8. The smaller border intercept is . In accordance to the criterion formulated in the end of the previous subsection, we let 
 = 0.5 > 1/4.24, and 
 = 
/100. We measure the quantity of the positively responding cells of the trained classifier as a function of the input (
,
). The result is depicted in  in color code. The straight interfaces of color, distinguishable in the figure, are the borders of type  associated with the individual linear classifiers (cells). 10.1371/journal.pone.0125144.g004 Simulation results for hard classification. Response of a trained distributed classifier in the space of inputs. Black-white dashed line—target (predefined) class border, white (black) filled circles—samples from the negative (positive) class, color—number of the positively responding cells (quantities 40 and above marked with same color). 10.1371/journal.pone.0125144.t001 Master population of 
 elementary linear classifiers (cells) with parameters  randomly sampled from the log-uniform distribution in the parameter space, bounded by the minimal and maximal values 
 and 
. The training sequence of negative class samples  of length 
. Trained set of cells constituting a distributed classifier. holds for this cell and this input (cell generates a positive answer) Remove the cell from the ensemble. The approach considered above can only be applied to hard classification problems with a special type of the classification border (namely, the border must be a curve connecting the axes in the input space, having a negative slope at each point, with the negative class being a convex region, see subsection “Hard classification technique and learning strategy” for details). In order to address problems with classification border of more general type, or “soft” classification problems (i.e. problems with inseparable classes with  unknown probability distributions in the input space) we employ soft learning strategy and a two-input elementary classifier design with a bell-shaped response function, which was suggested in . Two-input classifier with a bell-shaped response An elementary classifier circuit providing a bell-shaped response in the two-dimensional input space can be constructed of two independent sensing branches, whose outputs are combined using a genetic AND gate () . Each sensing branch is composed of two genetic modules, the sensor and the signal transducer . The sensing module is monotonically induced by the corresponding input chemical signal 
 ( = 1,2) and drives the synthesis of an intermediate repressor/activator 
. The signal transducer part is activated by 
 at intermediate concentrations and inhibited at higher concentrations, providing the maximal response at a certain concentration level. The classic well-characterized example of such promoter is the promoter 
 of phage lambda which provides this kind of non-monotonic response to the lambda repressor protein CI . The outputs 
 of both sensing branches drive the expression of a reporter protein (e.g., GFP) through a two-input genetic AND gate. A number of circuits performing logical operations including AND have been developed and characterized recently [–]. When each sensing branch provides a bell-shaped response function, then the response of the full circuit will also be a bell-shaped function in the two-dimensional input space. Omitting the indices  at all variables and parameters for the sake of conciseness and denoting the concentrations of , ,  with ,  and , the steady-state concentration of each single sensing branch output  can be written as 

where  is the input concentration, 
 and 
 are the degradation rates of  and , respectively; 
(⋅) and 
(⋅) are the effective production rates of  and  described by standard Hill functions


where  determines the basal expression from the sensor promoter in the absence of the input chemical , 
 and 
 are the dissociation constants of  and  with their corresponding promoters, the Hill coefficients 
 and 
 characterize the cooperativity of activation or repression of the corresponding promoters, 
 and 
 describe the overall expression strength of  and . The function () defined by Eqs ()–() is bell-shaped in a range of 
/
 ∈ (
,
/), with the position of the maximum determined by the value of 
/
. A master population of elementary two-input classifiers with response maxima randomly varied in the input space can be constructed by random variation of the sensory promoter strengths 
 both among the individual cells, as well as among the two sensory branches in each cell. The variation range of the maximum position is limited by the parameter , which is for common promoters of the order of 10[, ]. The full range can be covered, provided the promoter strengths 
 are varied at least 1/ = 10 fold, which is achievable, for example, by varying the DNA sequence within and near the ribosome binding site of the sensory gene [, ]. In the following we let the 
 parameters of the two sensory branches in a chosen th cell take on the values  and , the lower index denoting the input, the upper being the cell number, with all other parameters being the same in both sensory branches in all cells. We model the AND gate, which drives the reporter protein production, as a product of two Hill functions

where 
 are the inputs to the AND gate,  is a dimensional constant, 
 and 
 are respectively the dissociation constant and the Hill coefficient for the AND gate (for simplicity we assume equal values for both inputs). The inputs to the AND gate are essentially the outputs of the sensory branches, thus the output of a chosen th cell finally is

where 
 are the classifier inputs, the function (⋅, ⋅) is defined by , and (⋅) by Eqs ()–() with 
 substituted by  or  for either input branch, and index  labeling the individual cells. 10.1371/journal.pone.0125144.g005 Scheme of a two-input classifier circuit with a bell-shaped response. , 
—inputs inducing the corresponding promoters, RBS and RBS—ribosome binding sites determining the strengths of the input branches, U, U—intermediate repressor/activator factors, Z, Z—outputs of the individual branches, GFP—reporter gene. By “soft learning” we mean a learning strategy which reshapes the population density in the parameter space in response to a sequence of training examples in order to maximize the correct answer probability for the distributed classifier taken as a whole, without any hard separation of the cells into “correct” and “incorrect”. This can be achieved by organizing a kind of population dynamics which gives preference to cells which tend to maximize the performance of the whole classifier. In the simplest case, the training examples are sequentially presented to all cells in the population, and some cells get eliminated from the population in a probabilistic way, with survival probability depending upon the cell output, given the  knowledge about the particular training example to belong to a certain class. We use a more elaborate learning strategy incorporating a mechanism for conserving the total cell count. In the model description this is achieved by simply replacing each discarded cell with a duplicate of a randomly chosen cell from the population. In  it is shown that in the limit of infinite number of cells and infinite number of training samples the evolution of the population during this learning process is described by a set of ordinary differential equations in the form of a classical competition model. The viabilities of the competing cell types depend upon the correctness of their answers to the training samples. The same kind of dynamics can be approximately implemented in experiment, if the selection goes in parallel with cell division. The conserved number of cells is essentially the maximal (equilibrium) population size determined by experimental conditions. The cell viabilities can be controlled using FACS or by means of well-established genetically encoded positive/negative selection methods . In consistency with , we specify the probabilities of cell survival after presenting each training example as


where  is the cell output upon presenting a training example,  = exp(8
),  controls the “softness” of the learning (the greater , the softer is the slope of 
() and 
()). Either 
() or 
() is used, depending on the class to which the training example is  known to belong. The functions specified in (Eqs ,) have maximal slope at  = 1/8. The cell output range should be scaled to cover this value by adjusting the constant  in . The output of a distributed classifier is the sum of all individual cell outputs:

where 
(
,
) is defined by , and 
 is the total number of cells. The classification decision is made by comparing the classifier output to a threshold :

where  has to be adjusted after the learning to maximize the correct answer rate of the classifier. The classification border is actually a level line of (
,
) corresponding to the threshold . The aim of the soft learning is thus to reshape the population and select the optimal value of  in a way that the corresponding level line is the best approximation of the (unknown ) optimal classification border. The computational criterion of this optimality is the maximization of the correct answer rate using the given training examples. We used algorithm described in  to implement the soft learning strategy. We demonstrate the use of the soft classification strategy to solve two problems which are not solvable with hard distributed classifiers described in section “Hard classification problem”. The first example has separable classes which consist of disjoint regions and thus do not satisfy the requirements of convexity and negative slopes which were imposed in subsection “Hard classification technique and learning strategy”. The positive class is specified as union of two circles on the (
,
) plane, one centered at 
 = 
 =  with radius , and the other centered at 
 = 
 =  with radius 3, and the negative class as union of two ellipses, one centered at 
 = , 
 =  with semiaxes  and 3, and the other centered at 
 = , 
 =  with semiaxes  and , where The simulation parameters are 
 = 2⋅10, 
 = 100 (50 samples from each class), 
 = 1000, softness parameter  = 0.4, 
 = 2

, 
 = 2

, 
 = 20, 
 = 
 = 1, 
 = 2, 
 = 
 = 
 = 2,  = 10. Output scaling constant  = 1056.25 is chosen so that cell output  ranges from 0 to 0.25 in consistency with expressions for survival probabilities (,). The simulation result is presented in . All training samples are classified correctly after learning, but this becomes impossible in case of inseparable classification problems. The next example shows the classifier operation for inseparable classes. For either class we use a two-dimensional log-normal distribution resulting from independently sampling both inputs 
 and 
 from a one-dimensional log-normal distribution centered at log
 = −2.4 (log

 ≈ −1.04) for the positive class, and at log
 = −0.8 (log

 ≈ −0.35) for the negative class, with standard deviation of log
 for both classes set to 0.5 (which makes approximately 0.22 in terms of log

). The length of the training sequence is 
 = 2000 (1000 samples from each class), chosen so that the distributions overlap is represented by a number of samples from both classes. Other simulation parameters are the same as in the previous example. The result of the simulation is presented in  the same way as in the previous example. Since the training data are contradictory (overlapping), it is not possible to classify correctly all examples after learning. We observe, however, that the classification border produced by soft learning strategy separates the distributions close to a straight line equidistant from their centers in the logarithmic input space (which is the Bayesian solution). The successful classification rate of the distributed classifier computed by validation against a testing sequence of length 
 = 
 = 2000 (1000 samples from each class) amounts to 98.35%, which is very close to the theoretical maximum of 98.82% set forth by the Bayesian classification rule. We performed another simulation with an increased overlap of the distributions, which is achieved by shifting the central point of the positive class to log
 = −1.4 (log

 ≈ −0.61), with all other conditions kept from the previous simulation. Validation against a test sequence yields performance 77.1%, while the Bayesian result is 80.19%. There exist rigorous theorems on Bayes consistency (convergence to Bayesian decision boundaries) of classification methods , which applies to commonly used state-of-the-art machine learning methods. We did not carry out any rigorous consistency analysis for distributed classifiers, but based on the simulations we conclude that the considered mathematical model of distributed classifier demonstrates the possibility in principle to approach the theoretical maximum in classification performance. Biological implementation will face complications including cell count variation, transcriptional and instrumental noise, which inevitably cut down the classifier performance. That said, the simulation results justify the use of multi-input gene circuits in combination with distributed classifier approach to construct a learnable synthetic gene classifier. 10.1371/journal.pone.0125144.t002 Master population of 
 elementary classifiers (cells) with bell-shaped output with parameters  randomly sampled from the log-uniform distribution in the parameter space, bounded by the minimal and maximal values 
 and 
. The sequence of training examples  of length 
. The known class type 
 = ±1 for each example. The number of training iterations 
. Trained set of 
 cells constituting a distributed classifier; classification threshold 
. Calculate the th cell output  according to . Calculate the cell survival probability according to  or :  = 
(
) if 
 = +1, or  = 
(
) if 
 = −1. With probability 1−, choose a random cell from the population and eliminate the th cell, replacing it with the chosen cell. Use the trained population to calculate the population output  according to . Find the optimal classification threshold 
 by maximizing the correct classification rate over : . 10.1371/journal.pone.0125144.g006 Simulation results for soft classification strategy applied to separable classes. (A) Untrained (master) population output (color). (B) Trained population output (color). White (black) filled circles—samples from the negative (positive) class, black-white dashed line—classification border of the trained classifier. 10.1371/journal.pone.0125144.g007 Simulation results for soft classification strategy applied to inseparable classes. In this paper we have presented a design of multi-input classifiers to be implemented as a synthetic genetic network. We have considered two examples, corresponding to hard and soft learning strategy. As a multi-input classifier, these devices can solve classification task based on the data inseparable in the single dimension case. Moreover, the proposed design allows to achieve practically arbitrary shape of the classification border in the space of input signals. Here we have considered two-input genetic classifiers but the same design principles can be utilized to construct multi-input classifying devices, then the number of inputs is limited only by the availability of orthogonal input-inducible promoters and multi-input hybrid promoters. Our approach challenged a problem of discrimination between classes with overlapping probability density distributions in the input space. In this case the classification error probability cannot vanish and has to be minimized. The optimal solution to this problem is given by the Bayesian classification rule . In case of equal  probabilities for a randomly picked sample to belong to either class, the classification of a presented sample point from the parameter space is optimally done by comparing the class probability density functions at this point: the class with the greatest probability density value is the optimal answer to the classification problem. At the classification border the probability density functions become equal. If these functions are known , then the optimal border is thus also known, and the problem reduces to “hard classification”. When the probability density functions of the classes are not known , the optimal classification rule is not known either, and the classifier has to be trained by examples. Hard learning is not applicable in this case, because it may eventually lead to discarding all cells. Inseparable classes with  unknown probability density functions require another learning strategy which we refer to as “soft learning”, when the decision to discard or to keep a particular cell upon presenting a training example is probabilistic, depending on the cell output. Our consideration did not account for cell division. An accurate description of population dynamics should incorporate the dependence of the cell division rate upon the metabolic burden imposed by the synthetic constructs. This factor can play a destructive role on classification, since non-uniform cell duplication may reshape the trained population in a way that distorts the classifier output. Judging whether this effect will be important for the experimental system requires quantitative understanding of metabolic burden imbalance and its impact upon cell division. We leave it for a separate study. Another challenge to implementation is noise, both biological and instrumental. In  performance of distributed classifiers based on single-input genetic circuits was studied in the presence of both mentioned types of noise. It was shown that noise, when not too strong, does not destroy the classifier performance. We note, that a distributed classifier must be more robust to noise than single-cell classifiers due to averaging out the individual cell noise in the summary output. In this study we did not specially address the problem of noise. We do not expect, however, any qualitative difference in noise robustness between single- and multi-input classifier circuits. An important aspect of synthetic biology is the design of smart biological devices or new intelligent drugs, through the development of in vivo digital circuits . If living cells can be made to function as computers, one could envisage, for instance, the development of fully programmable microbial robots that are able to communicate with each other, with their environment and with human operators. These devices could then be used, e.g., for detection of hazardous substances or even to direct the growth of new tissue. In that direction, pioneering experimental studies have shown the feasibility of programmed pattern formation , the possibility of implementing logical gates and simple devices within cells , and the construction of new biological devices capable to solve or compute certain problems . The classifiers designed could be considered as a further development towards the construction of robust and predictable synthetic genetic biosensors, which have the potential to affect and effect a lot of applications in the biomedical, therapeutic, diagnostic, bioremediation, energy-generation and industrial fields [–]. Deriving an estimate for hard classifier response. Click here for additional data file..