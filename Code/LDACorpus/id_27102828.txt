Digital signal processing and control engineering has been widely used in many areas of science and engineering today. It enables our “digital society” and its applications are vast. This popularity is a result of the significant advances in digital computer technology. Complex signal processing and control tasks, which are usually too difficult and/or too expensive to be performed by analog systems, can be performed by less expensive and often more reliable digital computers. Furthermore, digital signal processing and control algorithms provide a greater degree of flexibility as they are programmable. In this context, there has been an explosive growth in digital signal processing and control theory and applications over the past decades. In this article, it is proposed the digital approach can be useful for the study of gene networks. Unlike conventional modeling approaches such as Boolean networks, Bayesian networks, Petri nets, ordinary differential equations, and stochastic simulation algorithms (reviewed in), digital signal processing and control can be used not only to model, simulate, and analyze gene networks but also to interact with them in real time as experimental data are mostly digital today. Analog or continuous experimental data are sampled or discretized at discrete time points (analog-to-digital conversion) and processed to generate digital control signals, which are transformed into analog signals through digital-to-analog conversion (). While calculus-based differential equations dominate in continuous domain, discrete-time difference equations, which require only addition and multiplication, become useful in digital domain. Difference equations have been extremely powerful in computational science and engineering due to this simplicity. They are typically generated by discretizing continuous differential equations using various approaches such as the Euler and Runge-Kutta methods. This approach is based on the assumption that continuous models better reflect reality and difference equations can be used to “approximate” those continuous models. Approximation or discretization error can be decreased by increasing the discretization resolution or the sampling frequency. In this article, an alternative approach is proposed as gene network dynamics are inherently discrete in nature. For example, there is no such thing as 1.02437 protein molecule. The amount of protein molecules present in cells is always a discrete integer number. In addition, the production of each protein molecule requires a discrete amount of time. In this context, it is proposed that difference equations can be used to model gene network dynamics, which approximate not continuous differential equations but real systems. This approach is not only simpler but also more accessible to students and researchers not familiar with differential equations since the mathematics is simple to understand. Similar to the first approach, the approximation or discretization error can be decreased by increasing the discretization resolution or the sampling frequency. Proteins are the worker molecules of biological systems. They perform virtually every activity within living organisms, including metabolism, cell division, apoptosis (programmed cell death), cell-cell interaction, etc. Therefore, it is not surprising that the biological information that each gene encodes is mainly for producing a specific type of protein. However, only knowing how a gene modulates its protein production is often insufficient to fully capture protein dynamics. A gene can activate or suppress the activity of other genes. This coupling or interaction of genes is called gene networks and any protein dynamics should to be understood in this context. It was suggested that gene networks are made of a small set of recurring modules called network motifs. Network motifs include simple two-gene network, autoregulation, feedforward loop, and feedback loop. The complexity of gene networks originates not only from various interconnection patterns or the number of genes involved but also from their adaptive and robust features. Although understanding these features is important to study the controllability of complex gene networks and to eventually control them, a mathematical framework is not yet well-established. It is an on-going research topic not only for biology but also for other related fields, such as adaptive sensor networks and swarm robotics, which involve complex network dynamics. The overall aim of this article is to introduce digital signal processing and control as a useful tool for the study of gene networks. Since digital signal processing and control, not to mention gene networks, is a very broad field that encompasses a wide range of topics, it is impossible to systematically probe every topic in depth. Therefore, a sequence of topics and examples are presented in a way that motivates the readers to pursue them further. Every attempt was made to make the materials accessible not only to engineers, mathematicians, or physicists but also to life scientists, introducing the basics of both digital signal processing and control and gene networks. Modeling simple two-gene network as a difference equation becomes important since it can serve as the basic building block for constructing more complex gene networks. One gene () can be activated by another gene (), as indicated by the notation  →  in . This simple notation, however, involves multiple steps. First,  is transcribed into , which is then translated into . In the presence of signal ,  transforms into its active form  and binds to the promoter of , transcribing  into . As  is translated,  is produced. Since protein activity is generally governed by concentration, we will express  and  in terms of concentration. The effect of  production by  can be counteracted by two processes that decrease  concentration: degradation (protein destruction) and dilution (concentration reduction due to increased cell volume). First, let us assume that  is only degraded or diluted. There is no  production by . This can be modeled using a difference equation: where n is the discrete time index (integer) and (n) is the concentration of  at time n. Having a sufficiently small time interval between measurements is important to capture desired dynamics in detail (Nyquist sampling theorem). In case we measure  and every minute, the time difference between (1) and (2) is 1 minute.  can be any value between 0 and 1. It cannot be greater than 1, which makes  increase, or less than 0, which makes  negative. In case (1) = 10 μM and  = 0.9: which shows  is indeed decreasing over time. The simulation code for  can be found online (see learnsysbio.net ). If we lower  from 0.9 to 0.1: which indicates  is more rapidly decreasing. In other words, a smaller  value corresponds to greater degradation or dilution. Next, let us add a new term (n − 1) to  to model  production by : where n is the discrete time index (integer) and (n) is the concentration of  at time n and (n) is the concentration of at time n. Note the value (n) at time n now depends on the previous values (n−1) and (n −1) at time n - 1. The parameter shows how strongly  activating . can be affected by many factors, including the presence of signal , transcription factor/promoter binding strength, etc. It cannot be indefinitely large since  production is restricted by the finite amount of available protein production machineries such as ribosomes. An example with constant (n) values (=10 μM), (1) = 0 μM,  = 0.9, and  = 0.2, can be shown as: The simulation code for  can be found online (see learnsysbio.net ) and the simulation result is shown in . From , following expressions can be derived: shows that as time approaches infinity (N ≈ ∞)  reaches a steady-state level given that  < 1 and and  values are not indefinitely large. This steady-state level is achieved while  production and degradation and/or dilution are simultaneously occurring. The time constant τ (tau) represents the time it takes  to reach 1 −1/e or approximately 63.2% of the steady-state level (). It is also called the response time, which can be used to evaluate how fast  changes or responds to the input signals. Protein production and degradation exhibit different dynamics shows the effect of different  values on . As  increases, the steady-state level also increases because is increasingly activating . However, the time constant τ does not change, indicating that , which governs production, does not affect how fast  reaches its steady-state level (see learnsysbio.net ).  shows the effect of different  values on . As  decreases (degradation increases), the steady-state level decreases because  is degraded or diluted more. Note the time constant τ also diminishes, which means  reaches its steady-state level faster as  decreases (see learnsysbio.net ). In summary, protein production affects only steady-state level, while protein degradation can affect both steady-state level and response time. This difference can be used to achieve target steady-state level with desired response time as shown in .  shows a particular target steady-state level (approximately 15 μM) can be achieved with  = 0.15 and  = 0.9. The response time is about 10 minutes. Decreasing from 0.9 to 0.4 (increasing protein degradation) reduces the response time to approximately 2 minutes, which is desired (). However, the steady-state level is also substantially reduced as a side effect. How can we achieve the target steady-state level of 15 μM with the response time of 2 minutes ?  shows this can be done by increasing  from 0.15 () to 0.9 while maintaining low  (high protein degradation). In other words, we can achieve the target steady-state level with desired response time by co-modulating protein production () and degradation (). Protein production and degradation are also “asymmetric”. Protein production is a slow process compared to protein degradation and this asymmetry can be exploited to generate various protein dynamics. An example is illustrated in . Let us assume cells want to change protein level from Level 1 to Level 2 by increasing its production as shown in . Since protein production is a slow process, increasing its rate is also slow. Note degradation is low in both Level 1 and Level 2. Cells can also achieve Level 1 with high production and high degradation as shown in . In this case, Level 2 can be reached by lowering degradation. Since production is already at high speed, the transition from Level 1 and Level 2 occurs faster. Using this co-modulation in various ways, cells may generate pulses with desired frequency, amplitude, and duration (), which has biological significance in DNA repair, tumorigenesis, embryonic development, etc.. Robustness of steady-state level The first term of , which depends on (1) or the initial value of , becomes zero as time goes to infinity, indicating that the steady-state level does not depend on the initial value. For example, if we change (1) from 0 to 5 μM, the steady-state level will not be affected (see  and learnsysbio.net ). Furthermore, steady-state level can be robustly maintained while automatically restoring its value in the presence of disturbance (see  and learnsysbio.net ). The  dynamics defined by  enables this robustness of steady-state level. Matrix representation of simple two-gene network Matrix computation is widely used in computational science and engineering and representing gene network dynamics using matrices and vectors can be useful. From , following expressions can be derived: These expressions can be compactly represented using matrices and vectors: Given  and  we can find , which becomes solving a system of linear equations. can be produced without being activated by other genes, which is called basal production. This production does not depend on and can be denoted as : When simulating gene networks, basal production can be added to the model to prevent protein levels from becoming negative.  cannot indefinitely increase as increases because  production eventually becomes saturated due to limited availability of protein synthesis resources (e.g., ribosomes). This can be modeled as: where is the maximum level  can be. We will use , which does not consider basal and saturated production, for simplicity in this article. Stochastic modeling: extrinsic and intrinsic noise Biological processes including gene expression are inherently stochastic constantly affected by noise. Different types of noise influencing gene expression include extrinsic and intrinsic noise. Extrinsic noise is “global” and universally affects the expression of all genes in a given cell. It is generated by factors such as variations in the number of RNA polymerase, ribosome, etc. In contrast, intrinsic noise is “local” and caused by noise propagated from upstream genes to downstream genes. It is generated by the randomness inherent in gene expression and has been used to analyze gene regulatory links. In our simple two-gene network model,  (upstream gene) activates  (downstream gene), which means extrinsic noise affecting  gene expression can be propagated to create intrinsic noise in  gene expression. This is demonstrated in . Initially, there is no noise affecting  and  levels (). Extrinsic noise obeying the normal (Gaussian) distribution (mean: 0, standard deviation: 1) is only added to  (see  and learnsysbio.net ). Although no noise is added to , fluctuations in  levels (intrinsic noise) are observed, which is caused by extrinsic noise propagated from  to . Interestingly,  fluctuations are much less than  fluctuations because our simple two-gene network is a low-pass filter, which removes or reduces high-frequency noise signals. This will be further discussed later. When extrinsic noise is added to  as well,  fluctuations look similar to  fluctuations (see  and learnsysbio.net ). When measured  and  data (e.g., ) are available, the parameter values  and  of  can be estimated, which can be used for predicting unknown  level. There are mainly two models we can use for this prediction: 1) time-invariant models with fixed parameter values and 2) time-variant models with parameter values changing adaptively over time. Gene networks are often treated as time-invariant by computational models but it was previously demonstrated that adaptive time-variant models approximate experimental measurements more accurately than time-invariant models, while reducing modeling complexity and representing gene network dynamics more realistically. Before proceeding any further,  can be modified into a more general form: where (n) at time n depends not only on immediate previous values (n −1) and (n −1) but also on other older  and  values (e.g., (n −3) and (n −5)). There are  previous  terms and  previous  terms determining the current value of (n). The parameters , …,  and , …,  show how each previous  and  term affects (n). In case the values of these parameters are fixed,  represents a time-invariant model. In contrast, an adaptive time-variant model allows them to change over time. Let us first examine a time-invariant model with fixed parameter values. The parameters or weights can be compactly represented by a single column vector : where superscript  stands for transpose, which changes a row vector into a column vector. The data vector  can be defined as: For example, in case we define our model as: Using  and ,  can be compactly expressed as: Assuming  is the parameter vector computed in an optimal way: where and  is the estimated value of (), which can be measured experimentally. The difference or error between () and  can be denoted as (): One approach for finding  is using the Least Squares (LS) estimation method such that ∑() is minimized: where  is  computed by the method. Applying  to our previous example model ( and ), we get: Once  is found,  can be predicted using : shows an example of  prediction using the least squares approach. Simulated data similar to  are used. As discussed previously by the author, the estimation performance using this approach is generally poor due to highly “time-varying” nature of gene expression even if we increase the model complexity by adding more terms to . level prediction using the Wiener filter There is another approach for  prediction using a time-invariant model called the Wiener filter. The Wiener filter computes  that minimizes the expected value of (). The concepts of random variable, discrete-time random process, and correlation will be briefly reviewed before they are discussed. Let us assume that we measure  using fluorescent reporter technology. (82), the  level at time 82 (n = 82), is called a random variable whose value can randomly change in each experiment. A collection of these random variables (e.g., (1), (2), (3), …) at discrete time points is called a discrete-time random process. The expected value of random variable (n) can be defined as: where  is the number of values (n) can take. In theory, we need an infinite number of experiment results to find the exact expected value of a random variable. The autocovariance function, which shows how two random variables that belong to the same (“auto”) random process “co-vary”, can be defined as: where n and n can be any time point from the identical discrete-time random process (n). The first term of  is the autocorrelation function: The cross-covariance function, which shows how two random variables that belong to two different (“cross”) random processes “co-vary”, can be defined as: where  is a discrete-time random process formed by random variables x(1), x(2), x(3), …. The first term of  represents the cross-correlation function: The Weiner filter can be used to estimate the parameters shown in  using autocorrelation and cross-correlation: where the correlation matrix  is [()()] and the correlation vector  is  is  computed by the Wiener filter. Once  is found, it can be used to predict  (): Although the Weiner filter can perform better than the Least Squares method (), it is based on the assumption that  and  are wide-sense stationary random processes and may not perform well if  and  are non-stationary random processes. Furthermore, finding expected values requires a substantial number of prior experiments to be performed, which is often not possible. Most of all, the approach assumes that the parameter values to be estimated are fixed and do not change over time. However, biological systems are highly dynamic and it is possible that those values will constantly change, demanding tracking of such fluctuating parameter values. Adaptive filters address these issues. level prediction using adaptive filters Adaptive filters iteratively update () that attempts to minimize (). The Least Means Squares (LMS) filter achieves this using the stochastic gradient descent method: where () is () computed using LMS at time n and  is the step size, which can be tuned to optimize performance. Let us use LMS to estimate the time-varying parameter values of simple two-gene network model shown in  (a =  and   ): Note () is not fixed and can constantly change over time. Using  and ,  can be compactly expressed as: The difference or error between measured  and estimated  can be denoted as : Using  and ,  can be re-expressed as: Since  is known,  can be computed: Once measured () is available, ( + 1) can be computed, which is then used to estimate  and these steps are repeated. An example of LMS-enabled  level estimation is shown in  (also see learnsysbio.net ). Note the estimation error (n) is large in the beginning but soon substantially reduced as the filter “learns” adaptively over time. Taking time variation into consideration allows low-order simple models (e.g., , ) to outperform more complex higher-order, time-invariant models (e.g., , ). Although adaptive filtering is introduced as an estimation technique for better fitting a model to data, the same approach can be used to elucidate the adaptive behavior of biological systems. Another possible extension of this work is to use adaptive filters and various forms of control mechanisms, such as adaptive control methods, for identifying and controlling the stochastic dynamics of gene networks in real time as described later. Simple two-gene network is a low-pass filter Any discrete-time signal (time-domain) can be decomposed into a collection of sine or cosine waves with different amplitudes, frequencies, and phases (frequency domain) (). Using the z-transform,  can be converted into its frequency domain representation: where , , and  is a complex number. When performing the z-transform, the region of convergence, which is the set of points in the complex plane for which the z-transform summation converges, needs to be considered. () is called the transfer function, which represents the system and transforms input () into output (). The frequency response of () can be illustrated using Bode plot as shown in  ( = 0.2,  = 0.9). The effect of extrinsic noise signals added to  levels with cycle period shorter than 30 min (high-frequency noise) will be reduced in  expression (), indicating  is a low-pass filter that passes low-frequency  signals while attenuating high-frequency  signals. This way, cells can prevent unwanted noise signals from propagating from upstream genes to downstream genes. It is intriguing that this filtering mechanism is achieved by co-modulating protein production () and degradation ().  is also called an Infinite Impulse Response (IIR) filter in digital signal processing. The response is “infinite” because there is feedback ((n −1) → (n)) in the filter. The discrete Fourier transform (DFT) is a special form of the z-transform widely used in science and engineering (frequency analysis, fast convolution, image processing, etc.) because it can mathematically reveal periodicities (frequency components) in discrete-time data as well as the relative strengths of any frequency components. For example, let us assume fluorescence intensity values of  measured four times (the time-interval: 1 minute) are 2, 0, 4, and 7: The DFT of the time series data (n) can be computed using: where () is angular frequency in radian per minute. 2π radian corresponds to one full cycle. For example, 4π radian per minute is equivalent to 2 cycles per minute. Since the total number of time-domain data N is 4, m can also take 4 different integer values, which generates 4 different () and (()) values: m = 0 (0 rad/min or 0 cycle/min): m = 1 (0.5π rad/min or 0.25 cycle/min): m = 2 (π rad/min or 0.5 cycle/min): m = 3 (1.5π rad/min or 0.75 cycle/min): The magnitude of each complex number (()) informs the relative strength of each frequency component, i.e., how much it contributes to the formation of (n): The result of DFT is “mirrored” meaning that the values of  for 0 ≤ () ≤ π are equivalent to those of  for π ≤ () ≤ 2π. In this respect, we can disregard the result for m = 3 (1.5π rad/min), which is equivalent to the result for m = 1 (0.5π rad/min). It was reported p53, one of the most studied genes in cancer biology, forms a negative feedback loop with MDM2 and p53 protein levels oscillate upon DNA damage by γ-irradiation.  shows such p53 oscillation. Note that there are about five cycles per 30 hours or 0.18 cycles per hour. By letting (n) represent the p53 protein levels,  can be computed using  (). It is shown that the frequency component 0.18 cycle/hour has high  value represented by a tall peak, indicating that it is one of the prominent frequency components contributing to (n). Positive autoregulation (PAR) occurs when a gene promotes its own protein production (positive feedback, ). The equation for PAR can be obtained by adding an additional term, which represents positive autoregulation, to  (see learnsysbio.net ). where  is the positive autoregulation parameter ( > 0). PAR increases the response time, the steady state value, and cell-cell variation in protein levels. Negative autoregulation (NAR) occurs when a gene represses its own gene expression (negative feedback, ). The equation for NAR can be obtained by adding an extra term, which represents negative autoregulation, to  (see learnsysbio.net ). where  is the negative autoregulation parameter ( > 0). It is shown that NAR can decrease the response time and the steady state value, while reducing cell-cell variation in protein levels. Coherent type-1 feedforward loop (C1-FFL) and incoherent type-1 feedforward loop (Ic1-FFL) are commonly found FFLs in biological systems. It was reported that C1-FFL causes delay in gene expression while Ic1-FFL induces pulse-like transient gene expression. C1-FFL can be expressed using following equations : where three genes , and  form C1-FFL, which induces delay in  (see learnsysbio.net ). Ic1-FFL can be expressed using following equations (): where three genes , and  form Ic1-FFL, which induces pulse-like transient  gene expression (see learnsysbio.net ). C1-FFLs and Ic1-FFLs can be combined into more complex and larger gene networks. An example called interlocked FFL can be found in , which generates sequential expression of multiple genes required for differentiation (see  and learnsysbio.net ). Negative feedback control of protein levels Gene networks are continuously affected by noise or fluctuations. Nevertheless, it is remarkable that they can robustly perform their functions in the presence of such disturbances. Feedback control theory informs us that feedback, a situation in which two (or more) dynamical sub-systems are connected in a way that their dynamics are coupled, can make a system resilient towards disturbances. Feedback control theory can be used 1) to study the inherent robust feature of natural gene networks and 2) to manipulate the dynamics of genetically-modified gene networks with man-created control inputs. The main goal of the first approach is to gain insights, which may be experimentally validated using the second approach. For example, the author previously suggested that the p53-Mdm2 negative feedback gene network robustly achieves low levels of p53. Since p53 protein may trigger apoptosis or “programmed cell death” when its levels are high, robustly maintaining them low using Mdm2 as a “negative feedback controller” becomes biologically significant. Although it is beyond the scope of this article, probing the uncertainty of gene network models, which may include various types of unmodeled dynamics (nonlinearity, etc.), is an important research topic. can be represented by the block diagram shown in . () is the input, () is the output, and () is the transfer or system function that processes the input to produce the output. Since the system may have other inputs than () we can redefine () as () such that it includes only , which is independent of () (). When designed properly, a negative feedback loop can reduce the impact of unwanted inputs or disturbances that influence the output of a system. When a system receives desired input signal in the presence of unwanted input or disturbance (), the output is affected by both inputs. The effect of such disturbance on the output can be reduced by adding a negative feedback loop and a controller to the system (). The same mechanism can be used to reduce the disturbance effect on  levels (). A new controller gene “c” is added to the gene network, which forms a negative feedback loop with  (). Discrete-time difference equations for this model can be expressed as: where all the parameter values are positive (see learnsysbio.net ). The negative sign for (n − 1) term in  indicates that  is downregulating  (negative feedback). Steady-state error (the difference or error between target and actual steady-state levels as time goes to infinity) depends on disturbance, which can be analyzed mathematically. Using the z-tranform,  and  can be represented by the block diagram shown in . () is the difference or error between 
() and 
(), which needs to be minimized, and distrubance is denoted as (). () can be expressed as: From the block diagram, () can also be written as: The second term in  represents the effect of () on () or the effect of the disturbance on the error, which needs to be minimized. This term can be denoted by () and its corresponding time domain discrete-time signal as (n). Using the final value theorem and assuming a step disturbance for (z) (=z/(z − 1)), we can compute the steady-state error due to the disturbance as follows (): Interestingly,  provides insight that the steady-state error caused by the disturbance can be reduced when  is increased or  is decreased. In other words, how fast protein molecules are produced () and degraded () can have an effect on the robustness of gene networks, although they may seem irrelevant. Substituting () in  by  and assuming no disturbance (() = 0): Complex numbers  and , which makes the denominator of () zero, are called the poles of the transfer function. If the poles lie within the unit circle on the complex plane (the magnitude of each pole (complex number) is less than or equal to one), the system is stable and the output does not blow up. From , a general form for () can be derived: Again, the stability of this system can be analyzed by finding the poles and checking if they lie within the unit circle on the complex plane. Stability analysis using state-space representation and  can be compactly represented by matrices and vectors: where  is the state vector,  is the state matrix, is the input matrix, and  is the input vector. This is called state-space representation and the eigenvalues of the state matrix are equivalent to the pole values of transfer function shown in . If the magnitude of each eigenvalue is less than or equal to one, the system is stable. digital control of protein levels As mentioned earlier, man-created control inputs can be used to manipulate the dynamics of genetically-modified gene networks, which may validate insights gained through mathematical modeling. One way of artificially modulating protein dynamics is using optogenetics, which was originally developed for modulating genetically modified light-sensitive ion channels in neurons. For example, it was recently demonstrated that intracellular protein levels can be controlled using light by modulating protein production and degradation (). Targeted time-varying protein levels in living cells are achieved using real-time fluorescent reporter image processing and  feedback control. Co-modulating protein production and degradation, harnessing the strengths of each mechanism, may generate protein dynamics previously shown in . Protein dynamics control virtually all cellular processes, including metabolism, growth, cell division, intercellular communication, etc., therefore, the capability of generating desired protein levels in individual cells can be immensely useful for unraveling the mechanism of these processes. illustrates an  digital control scheme, which can be used to modulate protein levels using light. Desired or “reference” fluorescence intensity at time n is denoted as (n). (n) is the difference or “error” between (n) and measured fluorescence intensity value (n) at time n: Upon receiving the error signal (n), a control algorithm, such as the PID (proportional-integral-derivative) control, may generate a control signal (n). It is the intensity of light given to the cell to minimize (n). For example, (n) generated by a PID controller can be expressed as: where , , and  are the controller parameters, which can be tuned for optimized performance and stability. Two types of (n) signals can be used in parallel to co-modulate (n) levels since protein production and degradation should rely on different colors of light to minimize cross-talk. Gene expression and relevant protein dynamics are slow processes, which take minutes and hours and not seconds, and the time interval between control input signals is typically greater than a minute. Real-time parameter estimation using adaptive filters described previously can be used for system identification, which may lead to better performance. For this, a simple mathematical model similar to  can be formulated as: Note measured fluorescence intensity value (n) at time n depends on two previous values at time n −1, (n −1) and control signal (n −1). Once  and  are adaptively estimated, a set of PID controller parameters (, , and ), which achieves desired performance and robustness, can be computed and updated in real time. It is also possible to address model (parameter) uncertainty based on adaptively estimated parameter values and to design a controller using model predictive and robust control theory (robust adaptive control), although it is beyond the scope of this article. In this article, it was proposed digital signal processing and control provides useful tools for the study of gene networks. It was shown that discrete-time difference equations can be used to study complex dynamics of gene networks by incorporating time and frequency domain approaches. Most importantly, it was suggested that digital signal processing and control algorithms can be used not only to model, simulate, and analyze gene networks but also to interact with them in real time since the experimental environment is mostly digital today. By no means this article is comprehensive and many digital signal processing and control concepts and tools (e.g., band-pass filter, etc.), which can be useful for the study of gene networks, were not discussed and will be addressed in future studies. MATLAB (Mathworks, USA) and JavaScript programming language were used for simulation. The source code for online modules (learnsysbio.net) is available on GitHub. : Shin, Y.-J. Digital Signal Processing and Control for the Study of Gene Networks. 
, 24733; doi: 10.1038/srep24733 (2016)..